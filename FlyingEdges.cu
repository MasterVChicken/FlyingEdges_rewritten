//
// Created by Yanliang Li on 9/3/24.
//

#include <cuda_runtime.h>
#include <iostream>
#include <fstream>
#include <vector>
#include <stdexcept>
#include <stdio.h>

// TODO: Now we have finished basic functions. But there are still bugs causing number of generated triangles to be 0. We'll check it soon.


// helper function to check CUDA error
void checkCudaError(cudaError_t result, const char *func, const char *file, int line) {
    if (result != cudaSuccess) {
        std::cerr << "CUDA error at " << file << ":" << line << " code=" << static_cast<unsigned int>(result)
                  << "(" << cudaGetErrorString(result) << ") \"" << func << "\"" << std::endl;
        exit(EXIT_FAILURE);
    }
}

// use MACRO CHECK_CUDA to call checkCudaError
#define CHECK_CUDA(func) checkCudaError((func), #func, __FILE__, __LINE__)
#define BLOCK_SIZE 64
#define MAX_THREADS_PER_BLOCK 512
#define MAX_ELEMENTS_PER_BLOCK (MAX_THREADS_PER_BLOCK * 2)

struct Vertex {
    float x, y, z;
};

struct Triangle {
    int v1, v2, v3;
};

// dimensionality: z > y > x
// Let's find the relationship between edges and vertexes
// Axes are:
//
//      z
//      |     x
//      |   /
//      | /
//      +----- y
//

// Vertex and edge layout:
//
//            4             5
//            +-------------+               +-----4-------+
//          / |           / |             / |            /|
//        /   |         /   |           7   8          5  9
//    7 +-----+-------+  6  |         +-----+6------+     |
//      |   0 +-------+-----+ 1       |     +-----0-+-----+
//      |   /         |   /           11   3        10   1
//      | /           | /             | /           | /
//    3 +-------------+ 2             +------2------+


// The number of triangles under each circumstance
__constant__ unsigned char
        numTris[256] =
        {
                0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2,
                1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
                1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
                2, 3, 3, 2, 3, 4, 4, 3, 3, 4, 4, 3, 4, 5, 5, 2,
                1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
                2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4,
                2, 3, 3, 4, 3, 4, 2, 3, 3, 4, 4, 5, 4, 5, 3, 2,
                3, 4, 4, 3, 4, 5, 3, 2, 4, 5, 5, 4, 5, 2, 4, 1,
                1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
                2, 3, 3, 4, 3, 4, 4, 5, 3, 2, 4, 3, 4, 3, 5, 2,
                2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4,
                3, 4, 4, 3, 4, 5, 5, 4, 4, 3, 5, 2, 5, 4, 2, 1,
                2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 2, 3, 3, 2,
                3, 4, 4, 5, 4, 5, 5, 2, 4, 3, 5, 4, 3, 2, 4, 1,
                3, 4, 4, 5, 4, 5, 3, 4, 4, 5, 5, 2, 3, 4, 2, 1,
                2, 3, 3, 2, 3, 4, 2, 1, 3, 2, 4, 1, 2, 1, 1, 0
        };

// The edge cut detail in each circumstance
__constant__ bool isCut[256][12] =
        {
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                {0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0},
                {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1},
                {1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1},
                {0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1},
                {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0},
                {1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0},
                {0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0},
                {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1},
                {1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                {0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0},
                {1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0},
                {1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0},
                {0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0},
                {0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1},
                {1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1},
                {1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1},
                {0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1},
                {0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0},
                {1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0},
                {1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0},
                {0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0},
                {0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1},
                {1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1},
                {1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1},
                {0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1},
                {0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0},
                {1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0},
                {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
                {0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0},
                {0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1},
                {1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1},
                {1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1},
                {0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
                {0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0},
                {1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0},
                {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0},
                {0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0},
                {0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                {1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1},
                {1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1},
                {0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1},
                {0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0},
                {1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0},
                {1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
                {0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1},
                {1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1},
                {0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1},
                {0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0},
                {1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0},
                {1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0},
                {0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0},
                {0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1},
                {1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1},
                {1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1},
                {0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1},
                {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1},
                {1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1},
                {1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1},
                {0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1},
                {0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0},
                {1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0},
                {1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0},
                {0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0},
                {0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1},
                {1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1},
                {1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1},
                {0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0},
                {1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0},
                {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0},
                {0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0},
                {0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1},
                {1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1},
                {1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1},
                {0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1},
                {0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0},
                {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                {1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0},
                {0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0},
                {0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1},
                {1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1},
                {0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0},
                {1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0},
                {1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                {0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0},
                {0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1},
                {1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1},
                {1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1},
                {0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1},
                {0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0},
                {1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0},
                {1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1},
                {1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1},
                {0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1},
                {0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0},
                {1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0},
                {1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0},
                {0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0},
                {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1},
                {1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1},
                {1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1},
                {0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1},
                {0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0},
                {1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0},
                {1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                {0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0},
                {0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1},
                {1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1},
                {0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1},
                {0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0},
                {1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0},
                {1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0},
                {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0},
                {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0},
                {1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0},
                {1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0},
                {0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0},
                {0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1},
                {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1},
                {1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1},
                {0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1},
                {0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0},
                {1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                {1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0},
                {0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0},
                {0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1},
                {1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1},
                {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1},
                {0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0},
                {1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0},
                {1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0},
                {0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0},
                {0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1},
                {1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1},
                {1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1},
                {0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1},
                {0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0},
                {1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
                {1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0},
                {0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0},
                {0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1},
                {1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1},
                {1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1},
                {0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1},
                {0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0},
                {1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                {1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0},
                {0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0},
                {0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1},
                {0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1},
                {0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0},
                {1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0},
                {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                {0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0},
                {0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1},
                {1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1},
                {1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1},
                {0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1},
                {0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0},
                {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0},
                {1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0},
                {0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0},
                {0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1},
                {1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1},
                {1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1},
                {0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1},
                {0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0},
                {1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0},
                {1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0},
                {0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0},
                {0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1},
                {1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1},
                {1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1},
                {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1},
                {1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1},
                {1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1},
                {0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0},
                {1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0},
                {1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0},
                {0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0},
                {0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1},
                {1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1},
                {1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
                {1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0},
                {1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0},
                {0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1},
                {1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1},
                {0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                {0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0},
                {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0},
                {1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0},
                {0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0},
                {0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
                {1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1},
                {0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1},
                {0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0},
                {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
                {1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0},
                {0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0},
                {0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1},
                {1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1},
                {1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1},
                {0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1},
                {0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0},
                {1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0},
                {1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0},
                {0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0},
                {0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1},
                {1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1},
                {1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1},
                {0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1},
                {0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0},
                {1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0},
                {1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                {1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1},
                {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1},
                {0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0},
                {1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0},
                {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0},
                {0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1},
                {1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1},
                {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                {1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        };

// I know this table looks like not so easy to understand
// First, -1 represent nothing. From where -1 starts, there will be no triangles
// Second, for the number series starts with non -1, every 3 elements represents a triangle
__constant__ char caseTriangles[256][16] =
        {
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  9,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  3,  8,  9,  1,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  8,  1,  11, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {9,  11, 2,  0,  9,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {2,  3,  8,  2,  8,  11, 11, 8,  9,  -1, -1, -1, -1, -1, -1, -1},
                {3,  2,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  2,  10, 8,  0,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  0,  9,  2,  10, 3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  2,  10, 1,  10, 9,  9,  10, 8,  -1, -1, -1, -1, -1, -1, -1},
                {3,  1,  11, 10, 3,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  1,  11, 0,  11, 8,  8,  11, 10, -1, -1, -1, -1, -1, -1, -1},
                {3,  0,  9,  3,  9,  10, 10, 9,  11, -1, -1, -1, -1, -1, -1, -1},
                {9,  11, 8,  11, 10, 8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  8,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  0,  3,  7,  4,  3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  9,  1,  8,  7,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  9,  1,  4,  1,  7,  7,  1,  3,  -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 2,  8,  7,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {3,  7,  4,  3,  4,  0,  1,  11, 2,  -1, -1, -1, -1, -1, -1, -1},
                {9,  11, 2,  9,  2,  0,  8,  7,  4,  -1, -1, -1, -1, -1, -1, -1},
                {2,  9,  11, 2,  7,  9,  2,  3,  7,  7,  4,  9,  -1, -1, -1, -1},
                {8,  7,  4,  3,  2,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {10, 7,  4,  10, 4,  2,  2,  4,  0,  -1, -1, -1, -1, -1, -1, -1},
                {9,  1,  0,  8,  7,  4,  2,  10, 3,  -1, -1, -1, -1, -1, -1, -1},
                {4,  10, 7,  9,  10, 4,  9,  2,  10, 9,  1,  2,  -1, -1, -1, -1},
                {3,  1,  11, 3,  11, 10, 7,  4,  8,  -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 10, 1,  10, 4,  1,  4,  0,  7,  4,  10, -1, -1, -1, -1},
                {4,  8,  7,  9,  10, 0,  9,  11, 10, 10, 3,  0,  -1, -1, -1, -1},
                {4,  10, 7,  4,  9,  10, 9,  11, 10, -1, -1, -1, -1, -1, -1, -1},
                {9,  4,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {9,  4,  5,  0,  3,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  4,  5,  1,  0,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {8,  4,  5,  8,  5,  3,  3,  5,  1,  -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 2,  9,  4,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {3,  8,  0,  1,  11, 2,  4,  5,  9,  -1, -1, -1, -1, -1, -1, -1},
                {5,  11, 2,  5,  2,  4,  4,  2,  0,  -1, -1, -1, -1, -1, -1, -1},
                {2,  5,  11, 3,  5,  2,  3,  4,  5,  3,  8,  4,  -1, -1, -1, -1},
                {9,  4,  5,  2,  10, 3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  2,  10, 0,  10, 8,  4,  5,  9,  -1, -1, -1, -1, -1, -1, -1},
                {0,  4,  5,  0,  5,  1,  2,  10, 3,  -1, -1, -1, -1, -1, -1, -1},
                {2,  5,  1,  2,  8,  5,  2,  10, 8,  4,  5,  8,  -1, -1, -1, -1},
                {11, 10, 3,  11, 3,  1,  9,  4,  5,  -1, -1, -1, -1, -1, -1, -1},
                {4,  5,  9,  0,  1,  8,  8,  1,  11, 8,  11, 10, -1, -1, -1, -1},
                {5,  0,  4,  5,  10, 0,  5,  11, 10, 10, 3,  0,  -1, -1, -1, -1},
                {5,  8,  4,  5,  11, 8,  11, 10, 8,  -1, -1, -1, -1, -1, -1, -1},
                {9,  8,  7,  5,  9,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {9,  0,  3,  9,  3,  5,  5,  3,  7,  -1, -1, -1, -1, -1, -1, -1},
                {0,  8,  7,  0,  7,  1,  1,  7,  5,  -1, -1, -1, -1, -1, -1, -1},
                {1,  3,  5,  3,  7,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {9,  8,  7,  9,  7,  5,  11, 2,  1,  -1, -1, -1, -1, -1, -1, -1},
                {11, 2,  1,  9,  0,  5,  5,  0,  3,  5,  3,  7,  -1, -1, -1, -1},
                {8,  2,  0,  8,  5,  2,  8,  7,  5,  11, 2,  5,  -1, -1, -1, -1},
                {2,  5,  11, 2,  3,  5,  3,  7,  5,  -1, -1, -1, -1, -1, -1, -1},
                {7,  5,  9,  7,  9,  8,  3,  2,  10, -1, -1, -1, -1, -1, -1, -1},
                {9,  7,  5,  9,  2,  7,  9,  0,  2,  2,  10, 7,  -1, -1, -1, -1},
                {2,  10, 3,  0,  8,  1,  1,  8,  7,  1,  7,  5,  -1, -1, -1, -1},
                {10, 1,  2,  10, 7,  1,  7,  5,  1,  -1, -1, -1, -1, -1, -1, -1},
                {9,  8,  5,  8,  7,  5,  11, 3,  1,  11, 10, 3,  -1, -1, -1, -1},
                {5,  0,  7,  5,  9,  0,  7,  0,  10, 1,  11, 0,  10, 0,  11, -1},
                {10, 0,  11, 10, 3,  0,  11, 0,  5,  8,  7,  0,  5,  0,  7,  -1},
                {10, 5,  11, 7,  5,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {11, 5,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  8,  5,  6,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {9,  1,  0,  5,  6,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  3,  8,  1,  8,  9,  5,  6,  11, -1, -1, -1, -1, -1, -1, -1},
                {1,  5,  6,  2,  1,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  5,  6,  1,  6,  2,  3,  8,  0,  -1, -1, -1, -1, -1, -1, -1},
                {9,  5,  6,  9,  6,  0,  0,  6,  2,  -1, -1, -1, -1, -1, -1, -1},
                {5,  8,  9,  5,  2,  8,  5,  6,  2,  3,  8,  2,  -1, -1, -1, -1},
                {2,  10, 3,  11, 5,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {10, 8,  0,  10, 0,  2,  11, 5,  6,  -1, -1, -1, -1, -1, -1, -1},
                {0,  9,  1,  2,  10, 3,  5,  6,  11, -1, -1, -1, -1, -1, -1, -1},
                {5,  6,  11, 1,  2,  9,  9,  2,  10, 9,  10, 8,  -1, -1, -1, -1},
                {6,  10, 3,  6,  3,  5,  5,  3,  1,  -1, -1, -1, -1, -1, -1, -1},
                {0,  10, 8,  0,  5,  10, 0,  1,  5,  5,  6,  10, -1, -1, -1, -1},
                {3,  6,  10, 0,  6,  3,  0,  5,  6,  0,  9,  5,  -1, -1, -1, -1},
                {6,  9,  5,  6,  10, 9,  10, 8,  9,  -1, -1, -1, -1, -1, -1, -1},
                {5,  6,  11, 4,  8,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  0,  3,  4,  3,  7,  6,  11, 5,  -1, -1, -1, -1, -1, -1, -1},
                {1,  0,  9,  5,  6,  11, 8,  7,  4,  -1, -1, -1, -1, -1, -1, -1},
                {11, 5,  6,  1,  7,  9,  1,  3,  7,  7,  4,  9,  -1, -1, -1, -1},
                {6,  2,  1,  6,  1,  5,  4,  8,  7,  -1, -1, -1, -1, -1, -1, -1},
                {1,  5,  2,  5,  6,  2,  3,  4,  0,  3,  7,  4,  -1, -1, -1, -1},
                {8,  7,  4,  9,  5,  0,  0,  5,  6,  0,  6,  2,  -1, -1, -1, -1},
                {7,  9,  3,  7,  4,  9,  3,  9,  2,  5,  6,  9,  2,  9,  6,  -1},
                {3,  2,  10, 7,  4,  8,  11, 5,  6,  -1, -1, -1, -1, -1, -1, -1},
                {5,  6,  11, 4,  2,  7,  4,  0,  2,  2,  10, 7,  -1, -1, -1, -1},
                {0,  9,  1,  4,  8,  7,  2,  10, 3,  5,  6,  11, -1, -1, -1, -1},
                {9,  1,  2,  9,  2,  10, 9,  10, 4,  7,  4,  10, 5,  6,  11, -1},
                {8,  7,  4,  3,  5,  10, 3,  1,  5,  5,  6,  10, -1, -1, -1, -1},
                {5,  10, 1,  5,  6,  10, 1,  10, 0,  7,  4,  10, 0,  10, 4,  -1},
                {0,  9,  5,  0,  5,  6,  0,  6,  3,  10, 3,  6,  8,  7,  4,  -1},
                {6,  9,  5,  6,  10, 9,  4,  9,  7,  7,  9,  10, -1, -1, -1, -1},
                {11, 9,  4,  6,  11, 4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  6,  11, 4,  11, 9,  0,  3,  8,  -1, -1, -1, -1, -1, -1, -1},
                {11, 1,  0,  11, 0,  6,  6,  0,  4,  -1, -1, -1, -1, -1, -1, -1},
                {8,  1,  3,  8,  6,  1,  8,  4,  6,  6,  11, 1,  -1, -1, -1, -1},
                {1,  9,  4,  1,  4,  2,  2,  4,  6,  -1, -1, -1, -1, -1, -1, -1},
                {3,  8,  0,  1,  9,  2,  2,  9,  4,  2,  4,  6,  -1, -1, -1, -1},
                {0,  4,  2,  4,  6,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {8,  2,  3,  8,  4,  2,  4,  6,  2,  -1, -1, -1, -1, -1, -1, -1},
                {11, 9,  4,  11, 4,  6,  10, 3,  2,  -1, -1, -1, -1, -1, -1, -1},
                {0,  2,  8,  2,  10, 8,  4,  11, 9,  4,  6,  11, -1, -1, -1, -1},
                {3,  2,  10, 0,  6,  1,  0,  4,  6,  6,  11, 1,  -1, -1, -1, -1},
                {6,  1,  4,  6,  11, 1,  4,  1,  8,  2,  10, 1,  8,  1,  10, -1},
                {9,  4,  6,  9,  6,  3,  9,  3,  1,  10, 3,  6,  -1, -1, -1, -1},
                {8,  1,  10, 8,  0,  1,  10, 1,  6,  9,  4,  1,  6,  1,  4,  -1},
                {3,  6,  10, 3,  0,  6,  0,  4,  6,  -1, -1, -1, -1, -1, -1, -1},
                {6,  8,  4,  10, 8,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {7,  6,  11, 7,  11, 8,  8,  11, 9,  -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  7,  0,  7,  11, 0,  11, 9,  6,  11, 7,  -1, -1, -1, -1},
                {11, 7,  6,  1,  7,  11, 1,  8,  7,  1,  0,  8,  -1, -1, -1, -1},
                {11, 7,  6,  11, 1,  7,  1,  3,  7,  -1, -1, -1, -1, -1, -1, -1},
                {1,  6,  2,  1,  8,  6,  1,  9,  8,  8,  7,  6,  -1, -1, -1, -1},
                {2,  9,  6,  2,  1,  9,  6,  9,  7,  0,  3,  9,  7,  9,  3,  -1},
                {7,  0,  8,  7,  6,  0,  6,  2,  0,  -1, -1, -1, -1, -1, -1, -1},
                {7,  2,  3,  6,  2,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {2,  10, 3,  11, 8,  6,  11, 9,  8,  8,  7,  6,  -1, -1, -1, -1},
                {2,  7,  0,  2,  10, 7,  0,  7,  9,  6,  11, 7,  9,  7,  11, -1},
                {1,  0,  8,  1,  8,  7,  1,  7,  11, 6,  11, 7,  2,  10, 3,  -1},
                {10, 1,  2,  10, 7,  1,  11, 1,  6,  6,  1,  7,  -1, -1, -1, -1},
                {8,  6,  9,  8,  7,  6,  9,  6,  1,  10, 3,  6,  1,  6,  3,  -1},
                {0,  1,  9,  10, 7,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {7,  0,  8,  7,  6,  0,  3,  0,  10, 10, 0,  6,  -1, -1, -1, -1},
                {7,  6,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {7,  10, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {3,  8,  0,  10, 6,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  9,  1,  10, 6,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {8,  9,  1,  8,  1,  3,  10, 6,  7,  -1, -1, -1, -1, -1, -1, -1},
                {11, 2,  1,  6,  7,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 2,  3,  8,  0,  6,  7,  10, -1, -1, -1, -1, -1, -1, -1},
                {2,  0,  9,  2,  9,  11, 6,  7,  10, -1, -1, -1, -1, -1, -1, -1},
                {6,  7,  10, 2,  3,  11, 11, 3,  8,  11, 8,  9,  -1, -1, -1, -1},
                {7,  3,  2,  6,  7,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {7,  8,  0,  7,  0,  6,  6,  0,  2,  -1, -1, -1, -1, -1, -1, -1},
                {2,  6,  7,  2,  7,  3,  0,  9,  1,  -1, -1, -1, -1, -1, -1, -1},
                {1,  2,  6,  1,  6,  8,  1,  8,  9,  8,  6,  7,  -1, -1, -1, -1},
                {11, 6,  7,  11, 7,  1,  1,  7,  3,  -1, -1, -1, -1, -1, -1, -1},
                {11, 6,  7,  1,  11, 7,  1,  7,  8,  1,  8,  0,  -1, -1, -1, -1},
                {0,  7,  3,  0,  11, 7,  0,  9,  11, 6,  7,  11, -1, -1, -1, -1},
                {7,  11, 6,  7,  8,  11, 8,  9,  11, -1, -1, -1, -1, -1, -1, -1},
                {6,  4,  8,  10, 6,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {3,  10, 6,  3,  6,  0,  0,  6,  4,  -1, -1, -1, -1, -1, -1, -1},
                {8,  10, 6,  8,  6,  4,  9,  1,  0,  -1, -1, -1, -1, -1, -1, -1},
                {9,  6,  4,  9,  3,  6,  9,  1,  3,  10, 6,  3,  -1, -1, -1, -1},
                {6,  4,  8,  6,  8,  10, 2,  1,  11, -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 2,  3,  10, 0,  0,  10, 6,  0,  6,  4,  -1, -1, -1, -1},
                {4,  8,  10, 4,  10, 6,  0,  9,  2,  2,  9,  11, -1, -1, -1, -1},
                {11, 3,  9,  11, 2,  3,  9,  3,  4,  10, 6,  3,  4,  3,  6,  -1},
                {8,  3,  2,  8,  2,  4,  4,  2,  6,  -1, -1, -1, -1, -1, -1, -1},
                {0,  2,  4,  4,  2,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  0,  9,  2,  4,  3,  2,  6,  4,  4,  8,  3,  -1, -1, -1, -1},
                {1,  4,  9,  1,  2,  4,  2,  6,  4,  -1, -1, -1, -1, -1, -1, -1},
                {8,  3,  1,  8,  1,  6,  8,  6,  4,  6,  1,  11, -1, -1, -1, -1},
                {11, 0,  1,  11, 6,  0,  6,  4,  0,  -1, -1, -1, -1, -1, -1, -1},
                {4,  3,  6,  4,  8,  3,  6,  3,  11, 0,  9,  3,  11, 3,  9,  -1},
                {11, 4,  9,  6,  4,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  5,  9,  7,  10, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  8,  4,  5,  9,  10, 6,  7,  -1, -1, -1, -1, -1, -1, -1},
                {5,  1,  0,  5,  0,  4,  7,  10, 6,  -1, -1, -1, -1, -1, -1, -1},
                {10, 6,  7,  8,  4,  3,  3,  4,  5,  3,  5,  1,  -1, -1, -1, -1},
                {9,  4,  5,  11, 2,  1,  7,  10, 6,  -1, -1, -1, -1, -1, -1, -1},
                {6,  7,  10, 1,  11, 2,  0,  3,  8,  4,  5,  9,  -1, -1, -1, -1},
                {7,  10, 6,  5,  11, 4,  4,  11, 2,  4,  2,  0,  -1, -1, -1, -1},
                {3,  8,  4,  3,  4,  5,  3,  5,  2,  11, 2,  5,  10, 6,  7,  -1},
                {7,  3,  2,  7,  2,  6,  5,  9,  4,  -1, -1, -1, -1, -1, -1, -1},
                {9,  4,  5,  0,  6,  8,  0,  2,  6,  6,  7,  8,  -1, -1, -1, -1},
                {3,  2,  6,  3,  6,  7,  1,  0,  5,  5,  0,  4,  -1, -1, -1, -1},
                {6,  8,  2,  6,  7,  8,  2,  8,  1,  4,  5,  8,  1,  8,  5,  -1},
                {9,  4,  5,  11, 6,  1,  1,  6,  7,  1,  7,  3,  -1, -1, -1, -1},
                {1,  11, 6,  1,  6,  7,  1,  7,  0,  8,  0,  7,  9,  4,  5,  -1},
                {4,  11, 0,  4,  5,  11, 0,  11, 3,  6,  7,  11, 3,  11, 7,  -1},
                {7,  11, 6,  7,  8,  11, 5,  11, 4,  4,  11, 8,  -1, -1, -1, -1},
                {6,  5,  9,  6,  9,  10, 10, 9,  8,  -1, -1, -1, -1, -1, -1, -1},
                {3,  10, 6,  0,  3,  6,  0,  6,  5,  0,  5,  9,  -1, -1, -1, -1},
                {0,  8,  10, 0,  10, 5,  0,  5,  1,  5,  10, 6,  -1, -1, -1, -1},
                {6,  3,  10, 6,  5,  3,  5,  1,  3,  -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 2,  9,  10, 5,  9,  8,  10, 10, 6,  5,  -1, -1, -1, -1},
                {0,  3,  10, 0,  10, 6,  0,  6,  9,  5,  9,  6,  1,  11, 2,  -1},
                {10, 5,  8,  10, 6,  5,  8,  5,  0,  11, 2,  5,  0,  5,  2,  -1},
                {6,  3,  10, 6,  5,  3,  2,  3,  11, 11, 3,  5,  -1, -1, -1, -1},
                {5,  9,  8,  5,  8,  2,  5,  2,  6,  3,  2,  8,  -1, -1, -1, -1},
                {9,  6,  5,  9,  0,  6,  0,  2,  6,  -1, -1, -1, -1, -1, -1, -1},
                {1,  8,  5,  1,  0,  8,  5,  8,  6,  3,  2,  8,  6,  8,  2,  -1},
                {1,  6,  5,  2,  6,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  6,  3,  1,  11, 6,  3,  6,  8,  5,  9,  6,  8,  6,  9,  -1},
                {11, 0,  1,  11, 6,  0,  9,  0,  5,  5,  0,  6,  -1, -1, -1, -1},
                {0,  8,  3,  5,  11, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {11, 6,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {10, 11, 5,  7,  10, 5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {10, 11, 5,  10, 5,  7,  8,  0,  3,  -1, -1, -1, -1, -1, -1, -1},
                {5,  7,  10, 5,  10, 11, 1,  0,  9,  -1, -1, -1, -1, -1, -1, -1},
                {11, 5,  7,  11, 7,  10, 9,  1,  8,  8,  1,  3,  -1, -1, -1, -1},
                {10, 2,  1,  10, 1,  7,  7,  1,  5,  -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  8,  1,  7,  2,  1,  5,  7,  7,  10, 2,  -1, -1, -1, -1},
                {9,  5,  7,  9,  7,  2,  9,  2,  0,  2,  7,  10, -1, -1, -1, -1},
                {7,  2,  5,  7,  10, 2,  5,  2,  9,  3,  8,  2,  9,  2,  8,  -1},
                {2,  11, 5,  2,  5,  3,  3,  5,  7,  -1, -1, -1, -1, -1, -1, -1},
                {8,  0,  2,  8,  2,  5,  8,  5,  7,  11, 5,  2,  -1, -1, -1, -1},
                {9,  1,  0,  5,  3,  11, 5,  7,  3,  3,  2,  11, -1, -1, -1, -1},
                {9,  2,  8,  9,  1,  2,  8,  2,  7,  11, 5,  2,  7,  2,  5,  -1},
                {1,  5,  3,  3,  5,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  7,  8,  0,  1,  7,  1,  5,  7,  -1, -1, -1, -1, -1, -1, -1},
                {9,  3,  0,  9,  5,  3,  5,  7,  3,  -1, -1, -1, -1, -1, -1, -1},
                {9,  7,  8,  5,  7,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {5,  4,  8,  5,  8,  11, 11, 8,  10, -1, -1, -1, -1, -1, -1, -1},
                {5,  4,  0,  5,  0,  10, 5,  10, 11, 10, 0,  3,  -1, -1, -1, -1},
                {0,  9,  1,  8,  11, 4,  8,  10, 11, 11, 5,  4,  -1, -1, -1, -1},
                {11, 4,  10, 11, 5,  4,  10, 4,  3,  9,  1,  4,  3,  4,  1,  -1},
                {2,  1,  5,  2,  5,  8,  2,  8,  10, 4,  8,  5,  -1, -1, -1, -1},
                {0,  10, 4,  0,  3,  10, 4,  10, 5,  2,  1,  10, 5,  10, 1,  -1},
                {0,  5,  2,  0,  9,  5,  2,  5,  10, 4,  8,  5,  10, 5,  8,  -1},
                {9,  5,  4,  2,  3,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {2,  11, 5,  3,  2,  5,  3,  5,  4,  3,  4,  8,  -1, -1, -1, -1},
                {5,  2,  11, 5,  4,  2,  4,  0,  2,  -1, -1, -1, -1, -1, -1, -1},
                {3,  2,  11, 3,  11, 5,  3,  5,  8,  4,  8,  5,  0,  9,  1,  -1},
                {5,  2,  11, 5,  4,  2,  1,  2,  9,  9,  2,  4,  -1, -1, -1, -1},
                {8,  5,  4,  8,  3,  5,  3,  1,  5,  -1, -1, -1, -1, -1, -1, -1},
                {0,  5,  4,  1,  5,  0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {8,  5,  4,  8,  3,  5,  9,  5,  0,  0,  5,  3,  -1, -1, -1, -1},
                {9,  5,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  7,  10, 4,  10, 9,  9,  10, 11, -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  8,  4,  7,  9,  9,  7,  10, 9,  10, 11, -1, -1, -1, -1},
                {1,  10, 11, 1,  4,  10, 1,  0,  4,  7,  10, 4,  -1, -1, -1, -1},
                {3,  4,  1,  3,  8,  4,  1,  4,  11, 7,  10, 4,  11, 4,  10, -1},
                {4,  7,  10, 9,  4,  10, 9,  10, 2,  9,  2,  1,  -1, -1, -1, -1},
                {9,  4,  7,  9,  7,  10, 9,  10, 1,  2,  1,  10, 0,  3,  8,  -1},
                {10, 4,  7,  10, 2,  4,  2,  0,  4,  -1, -1, -1, -1, -1, -1, -1},
                {10, 4,  7,  10, 2,  4,  8,  4,  3,  3,  4,  2,  -1, -1, -1, -1},
                {2,  11, 9,  2,  9,  7,  2,  7,  3,  7,  9,  4,  -1, -1, -1, -1},
                {9,  7,  11, 9,  4,  7,  11, 7,  2,  8,  0,  7,  2,  7,  0,  -1},
                {3,  11, 7,  3,  2,  11, 7,  11, 4,  1,  0,  11, 4,  11, 0,  -1},
                {1,  2,  11, 8,  4,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  1,  9,  4,  7,  1,  7,  3,  1,  -1, -1, -1, -1, -1, -1, -1},
                {4,  1,  9,  4,  7,  1,  0,  1,  8,  8,  1,  7,  -1, -1, -1, -1},
                {4,  3,  0,  7,  3,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  7,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {9,  8,  11, 11, 8,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {3,  9,  0,  3,  10, 9,  10, 11, 9,  -1, -1, -1, -1, -1, -1, -1},
                {0,  11, 1,  0,  8,  11, 8,  10, 11, -1, -1, -1, -1, -1, -1, -1},
                {3,  11, 1,  10, 11, 3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  10, 2,  1,  9,  10, 9,  8,  10, -1, -1, -1, -1, -1, -1, -1},
                {3,  9,  0,  3,  10, 9,  1,  9,  2,  2,  9,  10, -1, -1, -1, -1},
                {0,  10, 2,  8,  10, 0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {3,  10, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {2,  8,  3,  2,  11, 8,  11, 9,  8,  -1, -1, -1, -1, -1, -1, -1},
                {9,  2,  11, 0,  2,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {2,  8,  3,  2,  11, 8,  0,  8,  1,  1,  8,  11, -1, -1, -1, -1},
                {1,  2,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  8,  3,  9,  8,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  1,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  8,  3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
        };

__constant__ unsigned int
        edgeVertices[12][2] = {{0, 1},
                               {1, 2},
                               {3, 2},
                               {0, 3},
                               {4, 5},
                               {5, 6},
                               {7, 6},
                               {4, 7},
                               {0, 4},
                               {1, 5},
                               {3, 7},
                               {2, 6}};

// o -- is greater than or equal to
// case 0: (i-1) o-----o (i) | (_,j,k)
// case 1: (i-1) x-----o (i) | (_,j+1,k)
// case 2: (i-1) o-----x (i) | (_,j,k+1)
// case 3: (i-1) x-----x (i) | (_,j+1,k+1)
// Here we use bit operation to minimize branch resource consumption


// ALL SAFE HERE!!!
template<typename T>
__device__ int calculateEdgeCase(T left, T right, T isovalue) {
    int flag = ((right < isovalue) << 1) | (left < isovalue);

    return flag;
}


// ALL SAFE HERE!!!
template<typename T>
__global__ void calculateEdgeCases(T *scalars, T isovalue, int *edgeCases, dim3 dataShape) {
    // So for our config here, y, z represent the (_, y, z) and we iterate the all x along the y, z
    int x = blockIdx.x * blockDim.x + threadIdx.x;
    int y = blockIdx.y;
    int z = blockIdx.z;

    // x => [0, (dataShape.x - 2)], y/z => [0, (dataShape.y/.z -1)]
    if (x >= (dataShape.x - 1) || y > (dataShape.y - 1) || z > (dataShape.z - 1)) {
        return;
    }

    int baseIdx = y * (dataShape.x - 1) + z * (dataShape.x - 1) * dataShape.y;

    // Read scalar values directly from global memory
    T left = scalars[baseIdx + x];
    T right = scalars[baseIdx + x + 1];

    // Calculate edge case
    int edgeCase = calculateEdgeCase<T>(left, right, isovalue);

    // Write edge case to global memory
    int edgeIndex = x + y * (dataShape.x - 1) + z * (dataShape.x - 1) * dataShape.y;
    edgeCases[edgeIndex] = edgeCase;
}


__global__ void calculateTrimPositions(int *edgeCases, int *leftTrim, int *rightTrim, dim3 dataShape) {
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (j > (dataShape.y - 1) || k > (dataShape.z - 1)) {
        return;
    }

    int xL = dataShape.x - 1;
    int xR = -1;
    bool found = false;

    for (int i = 0; i < (dataShape.x - 1); ++i) {
        int edgeCase = edgeCases[i + j * (dataShape.x - 1) + k * (dataShape.x - 1) * dataShape.y];
        if (edgeCase == 1 || edgeCase == 2) {
            xL = min(xL, i);
            xR = max(xR, i);
            found = true;
        }
    }

    int index = j + k * dataShape.y;
    if (found) {
        leftTrim[index] = xL;
        rightTrim[index] = xR + 1;
    } else {
        leftTrim[index] = -1;
        rightTrim[index] = -1;
    }
}


// ALL SAFE HERE!!!
template<typename T>
void Pass1(T *scalars, T isovalue, int *edgeCases, int *leftTrim, int *rightTrim, dim3 dataShape) {
    dim3 threadsPerBlock(dataShape.x - 1, 1, 1);
    dim3 blocksPerGrid(1, dataShape.y, dataShape.z);

    calculateEdgeCases<<<blocksPerGrid, threadsPerBlock>>>(scalars, isovalue, edgeCases, dataShape);

    cudaDeviceSynchronize();

    dim3 trimThreadsPerBlock(1, 32, 32);
    dim3 trimBlocksPerGrid(1, ((dataShape.y + trimThreadsPerBlock.y - 1) / 32),
                           ((dataShape.z + trimThreadsPerBlock.z - 1) / 32));

    calculateTrimPositions<<<trimBlocksPerGrid, trimThreadsPerBlock>>>(edgeCases, leftTrim, rightTrim, dataShape);

    cudaDeviceSynchronize();
}


// ALL SAFE HERE!!!
__device__ int getCubeCase(int ec0, int ec1, int ec2, int ec3) {
    unsigned int caseId = 0;
    caseId |= ((ec0 == 0) | (ec0 == 2)) << 0;
    caseId |= ((ec0 == 0) | (ec0 == 1)) << 1;
    caseId |= ((ec1 == 0) | (ec1 == 1)) << 2;
    caseId |= ((ec1 == 0) | (ec1 == 2)) << 3;
    caseId |= ((ec2 == 0) | (ec2 == 2)) << 4;
    caseId |= ((ec2 == 0) | (ec2 == 1)) << 5;
    caseId |= ((ec3 == 0) | (ec3 == 1)) << 6;
    caseId |= ((ec3 == 0) | (ec3 == 2)) << 7;
    return caseId;
}


// ALL SAFE HERE!!!
__global__ void getCubeCases(const int *edgeCases,
                             const int *leftTrim,
                             const int *rightTrim,
                             int *triCount,
                             int *cubeCases,
                             int *left_c,
                             int *right_c,
                             dim3 dataShape) {

    const int j = blockIdx.y * blockDim.y + threadIdx.y;
    const int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (j >= (dataShape.y - 1) || k >= (dataShape.z - 1)) {
        return;
    }

    // jk: index for start edge
    // jk_cube: index for cube
    const int jk = j + k * dataShape.y;
    const int jk_cube = j + k * (dataShape.y - 1);

    // Compute left_c and right_c
    left_c[jk_cube] = min(min(leftTrim[jk], leftTrim[jk + 1]),
                          min(leftTrim[jk + dataShape.y], leftTrim[jk + dataShape.y + 1]));
    right_c[jk_cube] = min(min(rightTrim[jk], rightTrim[jk + 1]),
                           min(rightTrim[jk + dataShape.y], rightTrim[jk + dataShape.y + 1]));

    const int left = left_c[jk_cube];
    const int right = right_c[jk_cube];

    int localTriCount = 0;
    const int base_idx = j * (dataShape.x - 1) + k * (dataShape.x - 1) * dataShape.y;

    for (int i = left; i < right; ++i) {
        const int idx = i + base_idx;
        const int ec0 = edgeCases[idx];
        const int ec1 = edgeCases[idx + (dataShape.x - 1)];
        const int ec2 = edgeCases[idx + (dataShape.x - 1) * dataShape.y];
        const int ec3 = edgeCases[idx + (dataShape.x - 1) * dataShape.y + (dataShape.x - 1)];

        const unsigned char cubeCase = getCubeCase(ec0, ec1, ec2, ec3);
        cubeCases[i + j * (dataShape.x - 1) + k * (dataShape.x - 1) * (dataShape.y - 1)] = cubeCase;
        localTriCount += numTris[cubeCase];
    }

    triCount[jk_cube] = localTriCount;
}

__global__ void writeCubeTriangles(int *cubeCases, int *d_cubes_tri, dim3 dataShape) {
    int x = threadIdx.x + blockIdx.x * blockDim.x;
    int y = threadIdx.y + blockIdx.y * blockDim.y;
    int z = threadIdx.z + blockIdx.z * blockDim.z;
    if (x >= (dataShape.x - 1) || y >= (dataShape.y - 1) || z >= (dataShape.z - 1)) {
        return;
    }

    d_cubes_tri[x + y * (dataShape.x - 1 + z * (dataShape.x - 1) * (dataShape.y - 1))] = numTris[d_cubes_tri[x + y *
                                                                                                                 (dataShape.x -
                                                                                                                  1) +
                                                                                                             z *
                                                                                                             (dataShape.x -
                                                                                                              1) *
                                                                                                             (dataShape.y -
                                                                                                              1)]];

    __syncthreads();
}

// ALL SAFE HERE!!!
void Pass2(int *d_edgeCases, int *d_leftTrim, int *d_rightTrim, int *d_triCount,
           int *d_cubeCases, int *d_left_c, int *d_right_c, dim3 dataShape, int *d_cubes_tri) {
    dim3 threadsPerBlock(1, 32, 32);
    dim3 blocksPerGrid(1, (dataShape.y - 1 + threadsPerBlock.y - 1) / threadsPerBlock.y,
                       (dataShape.z - 1 + threadsPerBlock.z - 1) / threadsPerBlock.z);

    int totalVoxels = (dataShape.x - 1) * (dataShape.y - 1) * (dataShape.z - 1);

    getCubeCases<<<blocksPerGrid, threadsPerBlock>>>(d_edgeCases, d_leftTrim, d_rightTrim, d_triCount,
                                                     d_cubeCases, d_left_c, d_right_c, dataShape);

    cudaDeviceSynchronize();

    writeCubeTriangles<<<(totalVoxels + MAX_THREADS_PER_BLOCK - 1) / MAX_THREADS_PER_BLOCK, MAX_THREADS_PER_BLOCK>>>(
            d_cubeCases, d_cubes_tri, dataShape);

    cudaDeviceSynchronize();
}


__global__ void parallel_large_scan_kernel(int *data, int *prefix_sum, int N, int *sums) {
    __shared__ int tmp[MAX_ELEMENTS_PER_BLOCK];
    int tid = threadIdx.x;
    int bid = blockIdx.x;
    int block_offset = bid * MAX_ELEMENTS_PER_BLOCK;
    int leaf_num = MAX_ELEMENTS_PER_BLOCK;

    tmp[tid * 2] = tid * 2 + block_offset < N ? data[tid * 2 + block_offset] : 0;
    tmp[tid * 2 + 1] = tid * 2 + 1 + block_offset < N ? data[tid * 2 + 1 + block_offset] : 0;
    __syncthreads();

    int offset = 1;
    for (int d = leaf_num >> 1; d > 0; d >>= 1) {
        if (tid < d) {
            int ai = offset * (2 * tid + 1) - 1;
            int bi = offset * (2 * tid + 2) - 1;
            tmp[bi] += tmp[ai];
        }
        offset *= 2;
        __syncthreads();
    }

    if (tid == 0) {
        sums[bid] = tmp[leaf_num - 1];
        tmp[leaf_num - 1] = 0;
    }
    __syncthreads();

    for (int d = 1; d < leaf_num; d *= 2) {
        offset >>= 1;
        if (tid < d) {
            int ai = offset * (2 * tid + 1) - 1;
            int bi = offset * (2 * tid + 2) - 1;

            int v = tmp[ai];
            tmp[ai] = tmp[bi];
            tmp[bi] += v;
        }
        __syncthreads();
    }

    if (tid * 2 + block_offset < N) {
        prefix_sum[tid * 2 + block_offset] = tmp[tid * 2];
    }
    if (tid * 2 + 1 + block_offset < N) {
        prefix_sum[tid * 2 + 1 + block_offset] = tmp[tid * 2 + 1];
    }
}

__global__ void add_kernel(int *prefix_sum, int *valus, int N) {
    int tid = threadIdx.x;
    int bid = blockIdx.x;
    int block_offset = bid * MAX_ELEMENTS_PER_BLOCK;
    int ai = tid + block_offset;
    int bi = tid + (MAX_ELEMENTS_PER_BLOCK >> 1) + block_offset;

    if (ai < N) {
        prefix_sum[ai] += valus[bid];
    }
    if (bi < N) {
        prefix_sum[bi] += valus[bid];
    }
}

void recursive_scan(int *d_data, int *d_prefix_sum, int N) {
    int block_num = N / MAX_ELEMENTS_PER_BLOCK;
    if (N % MAX_ELEMENTS_PER_BLOCK != 0) {
        block_num += 1;
    }
    int *d_sums, *d_sums_prefix_sum;  // 用来保存block数组和、数组和的前缀和
    cudaMalloc(&d_sums, block_num * sizeof(int));
    cudaMalloc(&d_sums_prefix_sum, block_num * sizeof(int));

    parallel_large_scan_kernel<<<block_num, MAX_THREADS_PER_BLOCK>>>(d_data, d_prefix_sum, N, d_sums);

    if (block_num != 1) {
        recursive_scan(d_sums, d_sums_prefix_sum, block_num);
        add_kernel<<<block_num, MAX_THREADS_PER_BLOCK>>>(d_prefix_sum, d_sums_prefix_sum, N);
    }
}


// column_size: cell numbers in x-direction
// num_columns: you knows it
__global__ void columnWisePrefixScan(const int *d_input, int *d_output, int column_size, int num_columns) {
    extern __shared__ int temp[];
    int tid = threadIdx.x;
    int column = blockIdx.x;


    if (column >= num_columns) return;


    if (tid < column_size) {
        temp[tid] = d_input[column * column_size + tid];
    } else {
        temp[tid] = 0;
    }
    __syncthreads();


    for (int stride = 1; stride < column_size; stride *= 2) {
        int index = (tid + 1) * stride * 2 - 1;
        if (index < column_size) {
            temp[index] += temp[index - stride];
        }
        __syncthreads();
    }


    for (int stride = column_size / 4; stride > 0; stride /= 2) {
        int index = (tid + 1) * stride * 2 - 1;
        if (index + stride < column_size) {
            temp[index + stride] += temp[index];
        }
        __syncthreads();
    }


    if (tid < column_size) {
        d_output[column * column_size + tid] = temp[tid];
    }
}

__global__ void sumGlobal(int *column_sum, int *global_sum, int *tri_offsets, int column_size, int num_columns) {
    int tid = threadIdx.x;
    int bid = blockIdx.x * blockDim.x;

    if (tid >= column_size || bid >= num_columns) {
        return;
    }
    tri_offsets[tid + bid * column_size] = column_sum[tid + bid * column_size] + global_sum[bid];
}

void Pass3(int *d_triCount, int *d_triOffsets, int *d_cubes_tri, dim3 dataShape) {

    int column_size = dataShape.x - 1;
    int num_columns = (dataShape.y - 1) * (dataShape.z - 1);
    int blockNum = (dataShape.y - 1) * (dataShape.z - 1);

    // Get Prefix Sum Result for every cell line here
    int *d_sum_temp;
    CHECK_CUDA(cudaMalloc(&d_sum_temp, num_columns * sizeof(int)));
    recursive_scan(d_triCount, d_sum_temp, blockNum);

    cudaDeviceSynchronize();

    int *d_temp_ouput;
    CHECK_CUDA(cudaMalloc(&d_temp_ouput, num_columns * column_size * sizeof(int)));

    int sharedMemSize = column_size * sizeof(int);
    columnWisePrefixScan<<<num_columns, column_size, sharedMemSize>>>(d_cubes_tri, d_temp_ouput, column_size, blockNum);

    cudaDeviceSynchronize();

    sumGlobal<<<num_columns, column_size>>>(d_temp_ouput, d_sum_temp, d_triOffsets, column_size, num_columns);

    cudaDeviceSynchronize();

    cudaFree(d_sum_temp);
    cudaFree(d_temp_ouput);
}


// ALL SAFE HERE!!!
template<typename T>
__device__ void interpolateVertex(float *vert, T isovalue,
                                  float x1, float y1, float z1, T val1,
                                  float x2, float y2, float z2, T val2) {
    float mu = static_cast<float>(isovalue - val1) / static_cast<float>(val2 - val1);
    vert[0] = x1 + mu * (x2 - x1);
    vert[1] = y1 + mu * (y2 - y1);
    vert[2] = z1 + mu * (z2 - z1);
}


template<typename T>
__global__ void Pass4Kernel(
        const T *scalars,
        const int *cubeCases,
        const int *triOffsets,
        Vertex *vertices,
        Triangle *triangles,
        T isovalue,
        dim3 dataShape
) {
    int x = blockIdx.x * blockDim.x + threadIdx.x;
    int y = blockIdx.y * blockDim.y + threadIdx.y;
    int z = blockIdx.z * blockDim.z + threadIdx.z;

    // x, y, z represent cell indexes
    if (x >= (dataShape.x - 1) || y >= (dataShape.y - 1) || z >= (dataShape.z - 1)) {
        return;
    }

    int voxelIndex = x + y * (dataShape.x - 1) + z * (dataShape.x - 1) * (dataShape.y - 1);
    int cubeCase = cubeCases[voxelIndex];
    int triOffset = triOffsets[voxelIndex];

//    if (voxelIndex % 1000 == 0) {
//        printf("Voxel %d: cubeCase = %d, triOffset = %d\n", voxelIndex, cubeCase, triOffset);
//    }

    if (numTris[cubeCase] == 0) {
        return;
    }

    float cubeVertices[8][3] = {
            {static_cast<float>(x),     static_cast<float>(y),     static_cast<float>(z)},
            {static_cast<float>(x + 1), static_cast<float>(y),     static_cast<float>(z)},
            {static_cast<float>(x + 1), static_cast<float>(y + 1), static_cast<float>(z)},
            {static_cast<float>(x),     static_cast<float>(y + 1), static_cast<float>(z)},
            {static_cast<float>(x),     static_cast<float>(y),     static_cast<float>(z + 1)},
            {static_cast<float>(x + 1), static_cast<float>(y),     static_cast<float>(z + 1)},
            {static_cast<float>(x + 1), static_cast<float>(y + 1), static_cast<float>(z + 1)},
            {static_cast<float>(x),     static_cast<float>(y + 1), static_cast<float>(z + 1)}
    };

    float vertList[12][3];

    for (int i = 0; i < 12; ++i) {
        if (isCut[cubeCase][i]) {
            int v1 = edgeVertices[i][0];
            int v2 = edgeVertices[i][1];
            int idx1 = z * dataShape.x * dataShape.y + y * dataShape.x + x +
                       (v1 >> 2) * dataShape.x * dataShape.y + ((v1 & 2) >> 1) * dataShape.x + (v1 & 1);
            int idx2 = z * dataShape.x * dataShape.y + y * dataShape.x + x +
                       (v2 >> 2) * dataShape.x * dataShape.y + ((v2 & 2) >> 1) * dataShape.x + (v2 & 1);

            interpolateVertex(
                    vertList[i], isovalue,
                    cubeVertices[v1][0], cubeVertices[v1][1], cubeVertices[v1][2], scalars[idx1],
                    cubeVertices[v2][0], cubeVertices[v2][1], cubeVertices[v2][2], scalars[idx2]
            );
        }
    }

    for (int i = 0; i < numTris[cubeCase]; ++i) {
        int triIndex = triOffset + i;
        int vertIndex = triIndex * 3;

        for (int j = 0; j < 3; ++j) {
            int edgeIndex = caseTriangles[cubeCase][i * 3 + j];
            vertices[vertIndex + j].x = vertList[edgeIndex][0];
            vertices[vertIndex + j].y = vertList[edgeIndex][1];
            vertices[vertIndex + j].z = vertList[edgeIndex][2];
        }

        triangles[triIndex].v1 = vertIndex;
        triangles[triIndex].v2 = vertIndex + 1;
        triangles[triIndex].v3 = vertIndex + 2;
    }
}

// Host function for Pass4
template<typename T>
void Pass4(
        const T *d_scalars,
        const int *d_cubeCases,
        const int *d_triOffsets,
        Vertex *d_vertices,
        Triangle *d_triangles,
        T isovalue,
        dim3 dataShape
) {
    std::cout << "Pass4 started. dataShape: (" << dataShape.x << ", " << dataShape.y << ", " << dataShape.z << ")"
              << std::endl;

    dim3 blockSize(32, 32, 1);
    dim3 gridSize((dataShape.x - 1 + blockSize.x - 1) / (blockSize.x),
                  (dataShape.y - 1 + blockSize.y - 1) / (blockSize.y),
                  (dataShape.z - 1 + blockSize.z - 1) / (blockSize.z));


    std::cout << "Launching kernel with grid size: ("
              << gridSize.x << ", " << gridSize.y << ", " << gridSize.z
              << ") and block size: ("
              << blockSize.x << ", " << blockSize.y << ", " << blockSize.z << ")" << std::endl;

    Pass4Kernel<<<gridSize, blockSize>>>(d_scalars, d_cubeCases, d_triOffsets, d_vertices, d_triangles, isovalue,
                                         dataShape);

    // Check for kernel launch errors
    cudaError_t err = cudaGetLastError();
    if (err != cudaSuccess) {
        std::cerr << "CUDA Error in Pass4Kernel launch: " << cudaGetErrorString(err) << std::endl;
        return;
    }

    // Synchronize and check for kernel execution errors
    err = cudaDeviceSynchronize();
    if (err != cudaSuccess) {
        std::cerr << "CUDA Error in Pass4Kernel execution: " << cudaGetErrorString(err) << std::endl;
        return;
    }

    std::cout << "Pass4 completed successfully." << std::endl;
}


template<typename T>
std::vector <T> readF32File(const std::string &filename, std::size_t numElements) {
    std::ifstream file(filename.c_str(), std::ios::binary);
    if (!file.is_open()) {
        throw std::runtime_error("Unable to open file: " + filename);
    }

    // get file size
    file.seekg(0, std::ios::end);
    std::size_t fileSize = file.tellg();
    file.seekg(0, std::ios::beg);

    // calculate the number of elements to read
    std::size_t dataSize = std::min(fileSize / sizeof(T), numElements);
    std::vector <T> data(dataSize);

    // read data
    file.read(reinterpret_cast<char *>(data.data()), dataSize * sizeof(T));

    if (!file) {
        throw std::runtime_error("Error reading file: " + filename);
    }

    return data;
}

void exportToCSV(const std::vector <Vertex> &vertices, const std::vector <Triangle> &triangles) {
    std::ofstream vertexFile("vertices.csv");
    for (const auto &v: vertices) {
        vertexFile << v.x << "," << v.y << "," << v.z << "\n";
    }
    vertexFile.close();

    std::ofstream triangleFile("triangles.csv");
    for (const auto &t: triangles) {
        triangleFile << t.v1 << "," << t.v2 << "," << t.v3 << "\n";
    }
    triangleFile.close();
}

void outputTriOffsetsAndCounts(const int *d_triOffsets, const int *d_triCount, int totalVoxels) {
    std::vector<int> h_triOffsets(totalVoxels);
    std::vector<int> h_triCount(totalVoxels);
    std::string filename = "test.csv";

    // Copy data from device to host
    cudaError_t err = cudaMemcpy(h_triOffsets.data(), d_triOffsets, totalVoxels * sizeof(int), cudaMemcpyDeviceToHost);
    if (err != cudaSuccess) {
        std::cerr << "Failed to copy triOffsets from device to host: " << cudaGetErrorString(err) << std::endl;
        return;
    }

    err = cudaMemcpy(h_triCount.data(), d_triCount, totalVoxels * sizeof(int), cudaMemcpyDeviceToHost);
    if (err != cudaSuccess) {
        std::cerr << "Failed to copy triCount from device to host: " << cudaGetErrorString(err) << std::endl;
        return;
    }

    // Open file for writing
    std::ofstream outFile(filename);
    if (!outFile.is_open()) {
        std::cerr << "Failed to open file: " << filename << std::endl;
        return;
    }

    // Write header
    outFile << "Index,TriOffset,TriCount\n";

    // Write data
    for (int i = 0; i < totalVoxels; ++i) {
        outFile << i << "," << h_triOffsets[i] << "," << h_triCount[i] << "\n";
    }

    outFile.close();
    std::cout << "TriOffsets and TriCounts have been written to " << filename << std::endl;
}


void printTriCountAndOffsets(int *d_triCount, int *d_triOffsets, dim3 dataShape) {
    int totalVoxels = (dataShape.x - 1) * (dataShape.y - 1) * (dataShape.z - 1);
    int numSlices = (dataShape.y - 1) * (dataShape.z - 1);

    // 分配主机内存
    std::vector<int> h_triCount(numSlices);
    std::vector<int> h_triOffsets(totalVoxels);

    // 复制数据到主机
    CHECK_CUDA(cudaMemcpy(h_triCount.data(), d_triCount, numSlices * sizeof(int), cudaMemcpyDeviceToHost));
    CHECK_CUDA(cudaMemcpy(h_triOffsets.data(), d_triOffsets, totalVoxels * sizeof(int), cudaMemcpyDeviceToHost));

    // 打印 TriCount
    std::cout << "TriCount values:" << std::endl;
    for (int i = 0; i < numSlices; ++i) {
        std::cout << "Slice " << i << ": " << h_triCount[i] << std::endl;
    }

    // 打印 TriOffsets
    std::cout << "\nTriOffsets values:" << std::endl;
    for (int i = 0; i < totalVoxels; i += dataShape.x - 1) {
        std::cout << "Voxel " << i << ": " << h_triOffsets[i] << std::endl;
    }

    // 计算并打印总三角形数
    int totalTriangles = h_triOffsets[totalVoxels - 1] + h_triCount[numSlices - 1];
    std::cout << "\nTotal number of triangles: " << totalTriangles << std::endl;
}


int main() {
    try {
        float isovalue = 8453;
        std::string filePath = "temperature.f32";
        size_t numElements = 512 * 512 * 512;
        dim3 dataShape(512, 512, 512);
        std::vector<float> host_scalars;

        std::cout << "Reading file..." << std::endl;
        try {
            host_scalars = readF32File<float>(filePath, numElements);
        } catch (const std::exception &e) {
            std::cerr << "Error reading file: " << e.what() << std::endl;
            return -1;
        }
        std::cout << "File read successfully. Elements: " << host_scalars.size() << std::endl;

        float *d_scalars;
        int *d_edgeCases, *d_cubeCases, *d_leftTrim, *d_rightTrim, *d_triCount, *d_triOffsets;
        int *d_leftTrim_c, *d_rightTrim_c;
        int *d_cubes_tri;
        Vertex *d_vertices;
        Triangle *d_triangles;

        int totalVoxels = (dataShape.x - 1) * (dataShape.y - 1) * (dataShape.z - 1);
        std::cout << "Total voxels: " << totalVoxels << std::endl;

        // Allocate memory
        CHECK_CUDA(cudaMalloc(&d_scalars, numElements * sizeof(float)));
        CHECK_CUDA(cudaMalloc(&d_edgeCases, (dataShape.x - 1) * dataShape.y * dataShape.z * sizeof(int)));
        CHECK_CUDA(cudaMalloc(&d_cubeCases, (dataShape.x - 1) * (dataShape.y - 1) * (dataShape.z - 1) * sizeof(int)));
        CHECK_CUDA(cudaMalloc(&d_cubes_tri, (dataShape.x - 1) * (dataShape.y - 1) * (dataShape.z - 1) * sizeof(int)));
        CHECK_CUDA(cudaMalloc(&d_leftTrim, dataShape.y * dataShape.z * sizeof(int)));
        CHECK_CUDA(cudaMalloc(&d_rightTrim, dataShape.y * dataShape.z * sizeof(int)));
        CHECK_CUDA(cudaMalloc(&d_leftTrim_c, (dataShape.y - 1) * (dataShape.z - 1) * sizeof(int)));
        CHECK_CUDA(cudaMalloc(&d_rightTrim_c, (dataShape.y - 1) * (dataShape.z - 1) * sizeof(int)));
        CHECK_CUDA(cudaMalloc(&d_triCount, ((dataShape.y - 1) * (dataShape.z - 1)) * sizeof(int)));
        CHECK_CUDA(cudaMalloc(&d_triOffsets, totalVoxels * sizeof(int)));

        std::cout << "Memory allocated successfully." << std::endl;

        // Copy data to device
        CHECK_CUDA(cudaMemcpy(d_scalars, host_scalars.data(), numElements * sizeof(float), cudaMemcpyHostToDevice));

        std::cout << "Data copied to device." << std::endl;

        // Execute passes
        std::cout << "Executing Pass1..." << std::endl;
        Pass1<float>(d_scalars, isovalue, d_edgeCases, d_leftTrim, d_rightTrim, dataShape);

        std::cout << "Executing Pass2..." << std::endl;
        Pass2(d_edgeCases, d_leftTrim, d_rightTrim, d_triCount, d_cubeCases, d_leftTrim_c, d_rightTrim_c, dataShape,
              d_cubes_tri);

        std::cout << "Executing Pass3..." << std::endl;
        Pass3(d_triCount, d_triOffsets, d_cubes_tri, dataShape);
        cudaDeviceSynchronize();


        // Allocate host memory
        std::vector<int> h_triCount(totalVoxels);
        std::vector<int> h_triOffsets(totalVoxels);

        // Copy data from device to host
        CHECK_CUDA(cudaMemcpy(h_triCount.data(), d_triCount, (dataShape.y - 1) * (dataShape.z - 1) * sizeof(int),
                              cudaMemcpyDeviceToHost));
        CHECK_CUDA(cudaMemcpy(h_triOffsets.data(), d_triOffsets, totalVoxels * sizeof(int), cudaMemcpyDeviceToHost));

        // Calculate total triangles
        int totalTriangles = h_triOffsets[totalVoxels - 1] + h_triCount[(dataShape.y - 1) * (dataShape.z - 1) - 1];

        std::cout << "Total number of triangles: " << totalTriangles << std::endl;

        // Now you can use totalTriangles to allocate memory for vertices and triangles
        CHECK_CUDA(cudaMalloc(&d_vertices, totalTriangles * 3 * sizeof(Vertex)));
        CHECK_CUDA(cudaMalloc(&d_triangles, totalTriangles * sizeof(Triangle)));

        std::cout << "Executing Pass4..." << std::endl;


        Pass4<float>(d_scalars, d_cubeCases, d_triOffsets, d_vertices, d_triangles, isovalue,
                     dataShape);


        std::cout << "Copying results back to host..." << std::endl;
        std::vector <Vertex> hostVertices(totalTriangles * 3);
        std::vector <Triangle> hostTriangles(totalTriangles);
        CHECK_CUDA(cudaMemcpy(hostVertices.data(), d_vertices, totalTriangles * 3 * sizeof(Vertex),
                              cudaMemcpyDeviceToHost));
        CHECK_CUDA(cudaMemcpy(hostTriangles.data(), d_triangles, totalTriangles * sizeof(Triangle),
                              cudaMemcpyDeviceToHost));

//        exportToCSV(hostVertices, hostTriangles);

        std::cout << "Freeing device memory..." << std::endl;
        cudaFree(d_scalars);
        cudaFree(d_edgeCases);
        cudaFree(d_cubeCases);
        cudaFree(d_leftTrim);
        cudaFree(d_rightTrim);
        cudaFree(d_triCount);
        cudaFree(d_triOffsets);
        cudaFree(d_vertices);
        cudaFree(d_triangles);
        cudaFree(d_cubes_tri);

        return 0;
    } catch (const std::exception &e) {
        std::cerr << "An error occurred: " << e.what() << std::endl;
        return -1;
    }
}