//
// Created by Yanliang Li on 9/3/24.
//

#include <cuda_runtime.h>
#include <iostream>
#include <fstream>
#include <vector>
#include <stdexcept>

#define cudaCheckError() { \
    cudaError_t e=cudaGetLastError(); \
    if(e!=cudaSuccess) { \
        printf("Cuda failure %s:%d: '%s'\n",__FILE__,__LINE__,cudaGetErrorString(e)); \
        exit(0); \
    } \
}


// To be honest, I still prefer put all the vertexes into memory at 1 load.
// Just because the dataset is not huge yet, thus can be easily handled for several GB
const int BLOCK_SIZE_X = 512;

struct Vertex {
    float x, y, z;
};

struct Triangle {
    int v1, v2, v3;
};

// dimensionality: z > y > x
// Let's find the relationship between edges and vertexes
// Axes are:
//
//      z
//      |     x
//      |   /
//      | /
//      +----- y
//

// Vertex and edge layout:
//
//            4             5
//            +-------------+               +-----4-------+
//          / |           / |             / |            /|
//        /   |         /   |           7   8          5  9
//    7 +-----+-------+  6  |         +-----+6------+     |
//      |   0 +-------+-----+ 1       |     +-----0-+-----+
//      |   /         |   /           11   3        10   1
//      | /           | /             | /           | /
//    3 +-------------+ 2             +------2------+


// The number of triangles under each circumstance
__constant__ unsigned char
        numTris[256] =
        {
                0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2,
                1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
                1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
                2, 3, 3, 2, 3, 4, 4, 3, 3, 4, 4, 3, 4, 5, 5, 2,
                1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
                2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4,
                2, 3, 3, 4, 3, 4, 2, 3, 3, 4, 4, 5, 4, 5, 3, 2,
                3, 4, 4, 3, 4, 5, 3, 2, 4, 5, 5, 4, 5, 2, 4, 1,
                1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
                2, 3, 3, 4, 3, 4, 4, 5, 3, 2, 4, 3, 4, 3, 5, 2,
                2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4,
                3, 4, 4, 3, 4, 5, 5, 4, 4, 3, 5, 2, 5, 4, 2, 1,
                2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 2, 3, 3, 2,
                3, 4, 4, 5, 4, 5, 5, 2, 4, 3, 5, 4, 3, 2, 4, 1,
                3, 4, 4, 5, 4, 5, 3, 4, 4, 5, 5, 2, 3, 4, 2, 1,
                2, 3, 3, 2, 3, 4, 2, 1, 3, 2, 4, 1, 2, 1, 1, 0
        };

// The edge cut detail in each circumstance
__constant__ bool isCut[256][12] =
        {
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                {0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0},
                {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1},
                {1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1},
                {0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1},
                {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0},
                {1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0},
                {0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0},
                {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1},
                {1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                {0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0},
                {1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0},
                {1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0},
                {0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0},
                {0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1},
                {1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1},
                {1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1},
                {0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1},
                {0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0},
                {1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0},
                {1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0},
                {0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0},
                {0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1},
                {1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1},
                {1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1},
                {0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1},
                {0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0},
                {1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0},
                {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
                {0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0},
                {0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1},
                {1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1},
                {1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1},
                {0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
                {0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0},
                {1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0},
                {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0},
                {0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0},
                {0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                {1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1},
                {1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1},
                {0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1},
                {0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0},
                {1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0},
                {1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
                {0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1},
                {1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1},
                {0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1},
                {0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0},
                {1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0},
                {1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0},
                {0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0},
                {0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1},
                {1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1},
                {1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1},
                {0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1},
                {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1},
                {1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1},
                {1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1},
                {0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1},
                {0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0},
                {1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0},
                {1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0},
                {0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0},
                {0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1},
                {1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1},
                {1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1},
                {0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0},
                {1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0},
                {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0},
                {0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0},
                {0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1},
                {1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1},
                {1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1},
                {0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1},
                {0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0},
                {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                {1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0},
                {0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0},
                {0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1},
                {1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1},
                {0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0},
                {1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0},
                {1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                {0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0},
                {0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1},
                {1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1},
                {1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1},
                {0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1},
                {0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0},
                {1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0},
                {1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1},
                {1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1},
                {0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1},
                {0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0},
                {1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0},
                {1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0},
                {0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0},
                {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1},
                {1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1},
                {1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1},
                {0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1},
                {0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0},
                {1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0},
                {1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                {0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0},
                {0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1},
                {1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1},
                {0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1},
                {0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0},
                {1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0},
                {1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0},
                {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0},
                {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0},
                {1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0},
                {1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0},
                {0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0},
                {0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1},
                {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1},
                {1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1},
                {0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1},
                {0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0},
                {1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                {1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0},
                {0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0},
                {0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1},
                {1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1},
                {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1},
                {0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0},
                {1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0},
                {1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0},
                {0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0},
                {0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1},
                {1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1},
                {1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1},
                {0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1},
                {0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0},
                {1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
                {1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0},
                {0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0},
                {0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1},
                {1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1},
                {1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1},
                {0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1},
                {0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0},
                {1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                {1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0},
                {0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0},
                {0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1},
                {0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1},
                {0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0},
                {1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0},
                {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                {0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0},
                {0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1},
                {1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1},
                {1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1},
                {0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1},
                {0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0},
                {1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0},
                {1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0},
                {0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0},
                {0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1},
                {1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1},
                {1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1},
                {0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1},
                {0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0},
                {1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0},
                {1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0},
                {0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0},
                {0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1},
                {1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1},
                {1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1},
                {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1},
                {1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1},
                {1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1},
                {0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0},
                {1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0},
                {1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0},
                {0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0},
                {0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1},
                {1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1},
                {1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
                {1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0},
                {1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0},
                {0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1},
                {1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1},
                {0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                {0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0},
                {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0},
                {1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0},
                {0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0},
                {0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
                {1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1},
                {0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1},
                {0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0},
                {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
                {1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0},
                {0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0},
                {0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1},
                {1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1},
                {1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1},
                {0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1},
                {0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0},
                {1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0},
                {1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0},
                {0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0},
                {0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1},
                {1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1},
                {1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1},
                {0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1},
                {0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0},
                {1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0},
                {1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                {1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1},
                {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1},
                {0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0},
                {1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0},
                {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0},
                {0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1},
                {1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1},
                {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                {1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        };

// I know this table looks like not so easy to understand
// First, -1 represent nothing. From where -1 starts, there will be no triangles
// Second, for the number series starts with non -1, every 3 elements represents a triangle
__constant__ char caseTriangles[256][16] =
        {
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  9,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  3,  8,  9,  1,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  8,  1,  11, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {9,  11, 2,  0,  9,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {2,  3,  8,  2,  8,  11, 11, 8,  9,  -1, -1, -1, -1, -1, -1, -1},
                {3,  2,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  2,  10, 8,  0,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  0,  9,  2,  10, 3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  2,  10, 1,  10, 9,  9,  10, 8,  -1, -1, -1, -1, -1, -1, -1},
                {3,  1,  11, 10, 3,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  1,  11, 0,  11, 8,  8,  11, 10, -1, -1, -1, -1, -1, -1, -1},
                {3,  0,  9,  3,  9,  10, 10, 9,  11, -1, -1, -1, -1, -1, -1, -1},
                {9,  11, 8,  11, 10, 8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  8,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  0,  3,  7,  4,  3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  9,  1,  8,  7,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  9,  1,  4,  1,  7,  7,  1,  3,  -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 2,  8,  7,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {3,  7,  4,  3,  4,  0,  1,  11, 2,  -1, -1, -1, -1, -1, -1, -1},
                {9,  11, 2,  9,  2,  0,  8,  7,  4,  -1, -1, -1, -1, -1, -1, -1},
                {2,  9,  11, 2,  7,  9,  2,  3,  7,  7,  4,  9,  -1, -1, -1, -1},
                {8,  7,  4,  3,  2,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {10, 7,  4,  10, 4,  2,  2,  4,  0,  -1, -1, -1, -1, -1, -1, -1},
                {9,  1,  0,  8,  7,  4,  2,  10, 3,  -1, -1, -1, -1, -1, -1, -1},
                {4,  10, 7,  9,  10, 4,  9,  2,  10, 9,  1,  2,  -1, -1, -1, -1},
                {3,  1,  11, 3,  11, 10, 7,  4,  8,  -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 10, 1,  10, 4,  1,  4,  0,  7,  4,  10, -1, -1, -1, -1},
                {4,  8,  7,  9,  10, 0,  9,  11, 10, 10, 3,  0,  -1, -1, -1, -1},
                {4,  10, 7,  4,  9,  10, 9,  11, 10, -1, -1, -1, -1, -1, -1, -1},
                {9,  4,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {9,  4,  5,  0,  3,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  4,  5,  1,  0,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {8,  4,  5,  8,  5,  3,  3,  5,  1,  -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 2,  9,  4,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {3,  8,  0,  1,  11, 2,  4,  5,  9,  -1, -1, -1, -1, -1, -1, -1},
                {5,  11, 2,  5,  2,  4,  4,  2,  0,  -1, -1, -1, -1, -1, -1, -1},
                {2,  5,  11, 3,  5,  2,  3,  4,  5,  3,  8,  4,  -1, -1, -1, -1},
                {9,  4,  5,  2,  10, 3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  2,  10, 0,  10, 8,  4,  5,  9,  -1, -1, -1, -1, -1, -1, -1},
                {0,  4,  5,  0,  5,  1,  2,  10, 3,  -1, -1, -1, -1, -1, -1, -1},
                {2,  5,  1,  2,  8,  5,  2,  10, 8,  4,  5,  8,  -1, -1, -1, -1},
                {11, 10, 3,  11, 3,  1,  9,  4,  5,  -1, -1, -1, -1, -1, -1, -1},
                {4,  5,  9,  0,  1,  8,  8,  1,  11, 8,  11, 10, -1, -1, -1, -1},
                {5,  0,  4,  5,  10, 0,  5,  11, 10, 10, 3,  0,  -1, -1, -1, -1},
                {5,  8,  4,  5,  11, 8,  11, 10, 8,  -1, -1, -1, -1, -1, -1, -1},
                {9,  8,  7,  5,  9,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {9,  0,  3,  9,  3,  5,  5,  3,  7,  -1, -1, -1, -1, -1, -1, -1},
                {0,  8,  7,  0,  7,  1,  1,  7,  5,  -1, -1, -1, -1, -1, -1, -1},
                {1,  3,  5,  3,  7,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {9,  8,  7,  9,  7,  5,  11, 2,  1,  -1, -1, -1, -1, -1, -1, -1},
                {11, 2,  1,  9,  0,  5,  5,  0,  3,  5,  3,  7,  -1, -1, -1, -1},
                {8,  2,  0,  8,  5,  2,  8,  7,  5,  11, 2,  5,  -1, -1, -1, -1},
                {2,  5,  11, 2,  3,  5,  3,  7,  5,  -1, -1, -1, -1, -1, -1, -1},
                {7,  5,  9,  7,  9,  8,  3,  2,  10, -1, -1, -1, -1, -1, -1, -1},
                {9,  7,  5,  9,  2,  7,  9,  0,  2,  2,  10, 7,  -1, -1, -1, -1},
                {2,  10, 3,  0,  8,  1,  1,  8,  7,  1,  7,  5,  -1, -1, -1, -1},
                {10, 1,  2,  10, 7,  1,  7,  5,  1,  -1, -1, -1, -1, -1, -1, -1},
                {9,  8,  5,  8,  7,  5,  11, 3,  1,  11, 10, 3,  -1, -1, -1, -1},
                {5,  0,  7,  5,  9,  0,  7,  0,  10, 1,  11, 0,  10, 0,  11, -1},
                {10, 0,  11, 10, 3,  0,  11, 0,  5,  8,  7,  0,  5,  0,  7,  -1},
                {10, 5,  11, 7,  5,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {11, 5,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  8,  5,  6,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {9,  1,  0,  5,  6,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  3,  8,  1,  8,  9,  5,  6,  11, -1, -1, -1, -1, -1, -1, -1},
                {1,  5,  6,  2,  1,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  5,  6,  1,  6,  2,  3,  8,  0,  -1, -1, -1, -1, -1, -1, -1},
                {9,  5,  6,  9,  6,  0,  0,  6,  2,  -1, -1, -1, -1, -1, -1, -1},
                {5,  8,  9,  5,  2,  8,  5,  6,  2,  3,  8,  2,  -1, -1, -1, -1},
                {2,  10, 3,  11, 5,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {10, 8,  0,  10, 0,  2,  11, 5,  6,  -1, -1, -1, -1, -1, -1, -1},
                {0,  9,  1,  2,  10, 3,  5,  6,  11, -1, -1, -1, -1, -1, -1, -1},
                {5,  6,  11, 1,  2,  9,  9,  2,  10, 9,  10, 8,  -1, -1, -1, -1},
                {6,  10, 3,  6,  3,  5,  5,  3,  1,  -1, -1, -1, -1, -1, -1, -1},
                {0,  10, 8,  0,  5,  10, 0,  1,  5,  5,  6,  10, -1, -1, -1, -1},
                {3,  6,  10, 0,  6,  3,  0,  5,  6,  0,  9,  5,  -1, -1, -1, -1},
                {6,  9,  5,  6,  10, 9,  10, 8,  9,  -1, -1, -1, -1, -1, -1, -1},
                {5,  6,  11, 4,  8,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  0,  3,  4,  3,  7,  6,  11, 5,  -1, -1, -1, -1, -1, -1, -1},
                {1,  0,  9,  5,  6,  11, 8,  7,  4,  -1, -1, -1, -1, -1, -1, -1},
                {11, 5,  6,  1,  7,  9,  1,  3,  7,  7,  4,  9,  -1, -1, -1, -1},
                {6,  2,  1,  6,  1,  5,  4,  8,  7,  -1, -1, -1, -1, -1, -1, -1},
                {1,  5,  2,  5,  6,  2,  3,  4,  0,  3,  7,  4,  -1, -1, -1, -1},
                {8,  7,  4,  9,  5,  0,  0,  5,  6,  0,  6,  2,  -1, -1, -1, -1},
                {7,  9,  3,  7,  4,  9,  3,  9,  2,  5,  6,  9,  2,  9,  6,  -1},
                {3,  2,  10, 7,  4,  8,  11, 5,  6,  -1, -1, -1, -1, -1, -1, -1},
                {5,  6,  11, 4,  2,  7,  4,  0,  2,  2,  10, 7,  -1, -1, -1, -1},
                {0,  9,  1,  4,  8,  7,  2,  10, 3,  5,  6,  11, -1, -1, -1, -1},
                {9,  1,  2,  9,  2,  10, 9,  10, 4,  7,  4,  10, 5,  6,  11, -1},
                {8,  7,  4,  3,  5,  10, 3,  1,  5,  5,  6,  10, -1, -1, -1, -1},
                {5,  10, 1,  5,  6,  10, 1,  10, 0,  7,  4,  10, 0,  10, 4,  -1},
                {0,  9,  5,  0,  5,  6,  0,  6,  3,  10, 3,  6,  8,  7,  4,  -1},
                {6,  9,  5,  6,  10, 9,  4,  9,  7,  7,  9,  10, -1, -1, -1, -1},
                {11, 9,  4,  6,  11, 4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  6,  11, 4,  11, 9,  0,  3,  8,  -1, -1, -1, -1, -1, -1, -1},
                {11, 1,  0,  11, 0,  6,  6,  0,  4,  -1, -1, -1, -1, -1, -1, -1},
                {8,  1,  3,  8,  6,  1,  8,  4,  6,  6,  11, 1,  -1, -1, -1, -1},
                {1,  9,  4,  1,  4,  2,  2,  4,  6,  -1, -1, -1, -1, -1, -1, -1},
                {3,  8,  0,  1,  9,  2,  2,  9,  4,  2,  4,  6,  -1, -1, -1, -1},
                {0,  4,  2,  4,  6,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {8,  2,  3,  8,  4,  2,  4,  6,  2,  -1, -1, -1, -1, -1, -1, -1},
                {11, 9,  4,  11, 4,  6,  10, 3,  2,  -1, -1, -1, -1, -1, -1, -1},
                {0,  2,  8,  2,  10, 8,  4,  11, 9,  4,  6,  11, -1, -1, -1, -1},
                {3,  2,  10, 0,  6,  1,  0,  4,  6,  6,  11, 1,  -1, -1, -1, -1},
                {6,  1,  4,  6,  11, 1,  4,  1,  8,  2,  10, 1,  8,  1,  10, -1},
                {9,  4,  6,  9,  6,  3,  9,  3,  1,  10, 3,  6,  -1, -1, -1, -1},
                {8,  1,  10, 8,  0,  1,  10, 1,  6,  9,  4,  1,  6,  1,  4,  -1},
                {3,  6,  10, 3,  0,  6,  0,  4,  6,  -1, -1, -1, -1, -1, -1, -1},
                {6,  8,  4,  10, 8,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {7,  6,  11, 7,  11, 8,  8,  11, 9,  -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  7,  0,  7,  11, 0,  11, 9,  6,  11, 7,  -1, -1, -1, -1},
                {11, 7,  6,  1,  7,  11, 1,  8,  7,  1,  0,  8,  -1, -1, -1, -1},
                {11, 7,  6,  11, 1,  7,  1,  3,  7,  -1, -1, -1, -1, -1, -1, -1},
                {1,  6,  2,  1,  8,  6,  1,  9,  8,  8,  7,  6,  -1, -1, -1, -1},
                {2,  9,  6,  2,  1,  9,  6,  9,  7,  0,  3,  9,  7,  9,  3,  -1},
                {7,  0,  8,  7,  6,  0,  6,  2,  0,  -1, -1, -1, -1, -1, -1, -1},
                {7,  2,  3,  6,  2,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {2,  10, 3,  11, 8,  6,  11, 9,  8,  8,  7,  6,  -1, -1, -1, -1},
                {2,  7,  0,  2,  10, 7,  0,  7,  9,  6,  11, 7,  9,  7,  11, -1},
                {1,  0,  8,  1,  8,  7,  1,  7,  11, 6,  11, 7,  2,  10, 3,  -1},
                {10, 1,  2,  10, 7,  1,  11, 1,  6,  6,  1,  7,  -1, -1, -1, -1},
                {8,  6,  9,  8,  7,  6,  9,  6,  1,  10, 3,  6,  1,  6,  3,  -1},
                {0,  1,  9,  10, 7,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {7,  0,  8,  7,  6,  0,  3,  0,  10, 10, 0,  6,  -1, -1, -1, -1},
                {7,  6,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {7,  10, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {3,  8,  0,  10, 6,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  9,  1,  10, 6,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {8,  9,  1,  8,  1,  3,  10, 6,  7,  -1, -1, -1, -1, -1, -1, -1},
                {11, 2,  1,  6,  7,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 2,  3,  8,  0,  6,  7,  10, -1, -1, -1, -1, -1, -1, -1},
                {2,  0,  9,  2,  9,  11, 6,  7,  10, -1, -1, -1, -1, -1, -1, -1},
                {6,  7,  10, 2,  3,  11, 11, 3,  8,  11, 8,  9,  -1, -1, -1, -1},
                {7,  3,  2,  6,  7,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {7,  8,  0,  7,  0,  6,  6,  0,  2,  -1, -1, -1, -1, -1, -1, -1},
                {2,  6,  7,  2,  7,  3,  0,  9,  1,  -1, -1, -1, -1, -1, -1, -1},
                {1,  2,  6,  1,  6,  8,  1,  8,  9,  8,  6,  7,  -1, -1, -1, -1},
                {11, 6,  7,  11, 7,  1,  1,  7,  3,  -1, -1, -1, -1, -1, -1, -1},
                {11, 6,  7,  1,  11, 7,  1,  7,  8,  1,  8,  0,  -1, -1, -1, -1},
                {0,  7,  3,  0,  11, 7,  0,  9,  11, 6,  7,  11, -1, -1, -1, -1},
                {7,  11, 6,  7,  8,  11, 8,  9,  11, -1, -1, -1, -1, -1, -1, -1},
                {6,  4,  8,  10, 6,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {3,  10, 6,  3,  6,  0,  0,  6,  4,  -1, -1, -1, -1, -1, -1, -1},
                {8,  10, 6,  8,  6,  4,  9,  1,  0,  -1, -1, -1, -1, -1, -1, -1},
                {9,  6,  4,  9,  3,  6,  9,  1,  3,  10, 6,  3,  -1, -1, -1, -1},
                {6,  4,  8,  6,  8,  10, 2,  1,  11, -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 2,  3,  10, 0,  0,  10, 6,  0,  6,  4,  -1, -1, -1, -1},
                {4,  8,  10, 4,  10, 6,  0,  9,  2,  2,  9,  11, -1, -1, -1, -1},
                {11, 3,  9,  11, 2,  3,  9,  3,  4,  10, 6,  3,  4,  3,  6,  -1},
                {8,  3,  2,  8,  2,  4,  4,  2,  6,  -1, -1, -1, -1, -1, -1, -1},
                {0,  2,  4,  4,  2,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  0,  9,  2,  4,  3,  2,  6,  4,  4,  8,  3,  -1, -1, -1, -1},
                {1,  4,  9,  1,  2,  4,  2,  6,  4,  -1, -1, -1, -1, -1, -1, -1},
                {8,  3,  1,  8,  1,  6,  8,  6,  4,  6,  1,  11, -1, -1, -1, -1},
                {11, 0,  1,  11, 6,  0,  6,  4,  0,  -1, -1, -1, -1, -1, -1, -1},
                {4,  3,  6,  4,  8,  3,  6,  3,  11, 0,  9,  3,  11, 3,  9,  -1},
                {11, 4,  9,  6,  4,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  5,  9,  7,  10, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  8,  4,  5,  9,  10, 6,  7,  -1, -1, -1, -1, -1, -1, -1},
                {5,  1,  0,  5,  0,  4,  7,  10, 6,  -1, -1, -1, -1, -1, -1, -1},
                {10, 6,  7,  8,  4,  3,  3,  4,  5,  3,  5,  1,  -1, -1, -1, -1},
                {9,  4,  5,  11, 2,  1,  7,  10, 6,  -1, -1, -1, -1, -1, -1, -1},
                {6,  7,  10, 1,  11, 2,  0,  3,  8,  4,  5,  9,  -1, -1, -1, -1},
                {7,  10, 6,  5,  11, 4,  4,  11, 2,  4,  2,  0,  -1, -1, -1, -1},
                {3,  8,  4,  3,  4,  5,  3,  5,  2,  11, 2,  5,  10, 6,  7,  -1},
                {7,  3,  2,  7,  2,  6,  5,  9,  4,  -1, -1, -1, -1, -1, -1, -1},
                {9,  4,  5,  0,  6,  8,  0,  2,  6,  6,  7,  8,  -1, -1, -1, -1},
                {3,  2,  6,  3,  6,  7,  1,  0,  5,  5,  0,  4,  -1, -1, -1, -1},
                {6,  8,  2,  6,  7,  8,  2,  8,  1,  4,  5,  8,  1,  8,  5,  -1},
                {9,  4,  5,  11, 6,  1,  1,  6,  7,  1,  7,  3,  -1, -1, -1, -1},
                {1,  11, 6,  1,  6,  7,  1,  7,  0,  8,  0,  7,  9,  4,  5,  -1},
                {4,  11, 0,  4,  5,  11, 0,  11, 3,  6,  7,  11, 3,  11, 7,  -1},
                {7,  11, 6,  7,  8,  11, 5,  11, 4,  4,  11, 8,  -1, -1, -1, -1},
                {6,  5,  9,  6,  9,  10, 10, 9,  8,  -1, -1, -1, -1, -1, -1, -1},
                {3,  10, 6,  0,  3,  6,  0,  6,  5,  0,  5,  9,  -1, -1, -1, -1},
                {0,  8,  10, 0,  10, 5,  0,  5,  1,  5,  10, 6,  -1, -1, -1, -1},
                {6,  3,  10, 6,  5,  3,  5,  1,  3,  -1, -1, -1, -1, -1, -1, -1},
                {1,  11, 2,  9,  10, 5,  9,  8,  10, 10, 6,  5,  -1, -1, -1, -1},
                {0,  3,  10, 0,  10, 6,  0,  6,  9,  5,  9,  6,  1,  11, 2,  -1},
                {10, 5,  8,  10, 6,  5,  8,  5,  0,  11, 2,  5,  0,  5,  2,  -1},
                {6,  3,  10, 6,  5,  3,  2,  3,  11, 11, 3,  5,  -1, -1, -1, -1},
                {5,  9,  8,  5,  8,  2,  5,  2,  6,  3,  2,  8,  -1, -1, -1, -1},
                {9,  6,  5,  9,  0,  6,  0,  2,  6,  -1, -1, -1, -1, -1, -1, -1},
                {1,  8,  5,  1,  0,  8,  5,  8,  6,  3,  2,  8,  6,  8,  2,  -1},
                {1,  6,  5,  2,  6,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  6,  3,  1,  11, 6,  3,  6,  8,  5,  9,  6,  8,  6,  9,  -1},
                {11, 0,  1,  11, 6,  0,  9,  0,  5,  5,  0,  6,  -1, -1, -1, -1},
                {0,  8,  3,  5,  11, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {11, 6,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {10, 11, 5,  7,  10, 5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {10, 11, 5,  10, 5,  7,  8,  0,  3,  -1, -1, -1, -1, -1, -1, -1},
                {5,  7,  10, 5,  10, 11, 1,  0,  9,  -1, -1, -1, -1, -1, -1, -1},
                {11, 5,  7,  11, 7,  10, 9,  1,  8,  8,  1,  3,  -1, -1, -1, -1},
                {10, 2,  1,  10, 1,  7,  7,  1,  5,  -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  8,  1,  7,  2,  1,  5,  7,  7,  10, 2,  -1, -1, -1, -1},
                {9,  5,  7,  9,  7,  2,  9,  2,  0,  2,  7,  10, -1, -1, -1, -1},
                {7,  2,  5,  7,  10, 2,  5,  2,  9,  3,  8,  2,  9,  2,  8,  -1},
                {2,  11, 5,  2,  5,  3,  3,  5,  7,  -1, -1, -1, -1, -1, -1, -1},
                {8,  0,  2,  8,  2,  5,  8,  5,  7,  11, 5,  2,  -1, -1, -1, -1},
                {9,  1,  0,  5,  3,  11, 5,  7,  3,  3,  2,  11, -1, -1, -1, -1},
                {9,  2,  8,  9,  1,  2,  8,  2,  7,  11, 5,  2,  7,  2,  5,  -1},
                {1,  5,  3,  3,  5,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  7,  8,  0,  1,  7,  1,  5,  7,  -1, -1, -1, -1, -1, -1, -1},
                {9,  3,  0,  9,  5,  3,  5,  7,  3,  -1, -1, -1, -1, -1, -1, -1},
                {9,  7,  8,  5,  7,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {5,  4,  8,  5,  8,  11, 11, 8,  10, -1, -1, -1, -1, -1, -1, -1},
                {5,  4,  0,  5,  0,  10, 5,  10, 11, 10, 0,  3,  -1, -1, -1, -1},
                {0,  9,  1,  8,  11, 4,  8,  10, 11, 11, 5,  4,  -1, -1, -1, -1},
                {11, 4,  10, 11, 5,  4,  10, 4,  3,  9,  1,  4,  3,  4,  1,  -1},
                {2,  1,  5,  2,  5,  8,  2,  8,  10, 4,  8,  5,  -1, -1, -1, -1},
                {0,  10, 4,  0,  3,  10, 4,  10, 5,  2,  1,  10, 5,  10, 1,  -1},
                {0,  5,  2,  0,  9,  5,  2,  5,  10, 4,  8,  5,  10, 5,  8,  -1},
                {9,  5,  4,  2,  3,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {2,  11, 5,  3,  2,  5,  3,  5,  4,  3,  4,  8,  -1, -1, -1, -1},
                {5,  2,  11, 5,  4,  2,  4,  0,  2,  -1, -1, -1, -1, -1, -1, -1},
                {3,  2,  11, 3,  11, 5,  3,  5,  8,  4,  8,  5,  0,  9,  1,  -1},
                {5,  2,  11, 5,  4,  2,  1,  2,  9,  9,  2,  4,  -1, -1, -1, -1},
                {8,  5,  4,  8,  3,  5,  3,  1,  5,  -1, -1, -1, -1, -1, -1, -1},
                {0,  5,  4,  1,  5,  0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {8,  5,  4,  8,  3,  5,  9,  5,  0,  0,  5,  3,  -1, -1, -1, -1},
                {9,  5,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  7,  10, 4,  10, 9,  9,  10, 11, -1, -1, -1, -1, -1, -1, -1},
                {0,  3,  8,  4,  7,  9,  9,  7,  10, 9,  10, 11, -1, -1, -1, -1},
                {1,  10, 11, 1,  4,  10, 1,  0,  4,  7,  10, 4,  -1, -1, -1, -1},
                {3,  4,  1,  3,  8,  4,  1,  4,  11, 7,  10, 4,  11, 4,  10, -1},
                {4,  7,  10, 9,  4,  10, 9,  10, 2,  9,  2,  1,  -1, -1, -1, -1},
                {9,  4,  7,  9,  7,  10, 9,  10, 1,  2,  1,  10, 0,  3,  8,  -1},
                {10, 4,  7,  10, 2,  4,  2,  0,  4,  -1, -1, -1, -1, -1, -1, -1},
                {10, 4,  7,  10, 2,  4,  8,  4,  3,  3,  4,  2,  -1, -1, -1, -1},
                {2,  11, 9,  2,  9,  7,  2,  7,  3,  7,  9,  4,  -1, -1, -1, -1},
                {9,  7,  11, 9,  4,  7,  11, 7,  2,  8,  0,  7,  2,  7,  0,  -1},
                {3,  11, 7,  3,  2,  11, 7,  11, 4,  1,  0,  11, 4,  11, 0,  -1},
                {1,  2,  11, 8,  4,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  1,  9,  4,  7,  1,  7,  3,  1,  -1, -1, -1, -1, -1, -1, -1},
                {4,  1,  9,  4,  7,  1,  0,  1,  8,  8,  1,  7,  -1, -1, -1, -1},
                {4,  3,  0,  7,  3,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {4,  7,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {9,  8,  11, 11, 8,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {3,  9,  0,  3,  10, 9,  10, 11, 9,  -1, -1, -1, -1, -1, -1, -1},
                {0,  11, 1,  0,  8,  11, 8,  10, 11, -1, -1, -1, -1, -1, -1, -1},
                {3,  11, 1,  10, 11, 3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  10, 2,  1,  9,  10, 9,  8,  10, -1, -1, -1, -1, -1, -1, -1},
                {3,  9,  0,  3,  10, 9,  1,  9,  2,  2,  9,  10, -1, -1, -1, -1},
                {0,  10, 2,  8,  10, 0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {3,  10, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {2,  8,  3,  2,  11, 8,  11, 9,  8,  -1, -1, -1, -1, -1, -1, -1},
                {9,  2,  11, 0,  2,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {2,  8,  3,  2,  11, 8,  0,  8,  1,  1,  8,  11, -1, -1, -1, -1},
                {1,  2,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1,  8,  3,  9,  8,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  1,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {0,  8,  3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
        };

__constant__ unsigned char
        edgeVertices[12][2] = {{0, 1},
                               {1, 2},
                               {3, 2},
                               {0, 3},
                               {4, 5},
                               {5, 6},
                               {7, 6},
                               {4, 7},
                               {0, 4},
                               {1, 5},
                               {3, 7},
                               {2, 6}};

// o -- is greater than or equal to
// case 0: (i-1) o-----o (i) | (_,j,k)
// case 1: (i-1) x-----o (i) | (_,j+1,k)
// case 2: (i-1) o-----x (i) | (_,j,k+1)
// case 3: (i-1) x-----x (i) | (_,j+1,k+1)
// Here we use bit operation to minimize branch resource consumption

template<typename T>
__device__ int calculateEdgeCase(T left, T right, T isovalue) {
    int flag = ((right < isovalue) << 1) | (left < isovalue);

    return flag;
}

template<typename T>
__global__ void calculateEdgeCases(T *scalars, T isovalue, int *edgeCases, dim3 dataShape) {
    int x = blockIdx.x * blockDim.x + threadIdx.x;
    int y = blockIdx.y;
    int z = blockIdx.z;

    // Check boundary conditions
    if (x >= dataShape.x - 1 || y >= dataShape.y - 1 || z >= dataShape.z - 1) {
        return;
    }

    // (dataShape.x-1) means the edge
    int baseIdx = y * (dataShape.x - 1) + z * (dataShape.x - 1) * dataShape.y;

    // Read scalar values directly from global memory
    T left = scalars[baseIdx + x];
    T right = scalars[baseIdx + x + 1];

    // Calculate edge case
    int edgeCase = calculateEdgeCase<T>(left, right, isovalue);

    // Write edge case to global memory
    int edgeIndex = x + y * (dataShape.x - 1) + z * (dataShape.x - 1) * dataShape.y;
    edgeCases[edgeIndex] = edgeCase;
}

// Every thread is in charge of calculating an x-direction vertexes to determine left and right trim pos.
__global__ void calculateTrimPositions(int *edgeCases, int *leftTrim, int *rightTrim, dim3 dataShape) {
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (j > (dataShape.y - 1) || k > (dataShape.z - 1)) {
        return;
    }

    int xL = dataShape.x;
    int xR = -1;

    for (int i = 0; i < dataShape.x - 1; ++i) {
        int edgeCase = edgeCases[i + j * (dataShape.x - 1) + k * (dataShape.x - 1) * dataShape.y];
        if (edgeCase == 1 || edgeCase == 2) {
            xL = min(xL, i);
            xR = max(xR, i);
        }
    }

    leftTrim[j + k * (dataShape.y - 1)] = xL;
    rightTrim[j + k * (dataShape.y - 1)] = xR + 1;
}

template<typename T, int BLOCK_SIZE_X>
void Pass1(T *scalars, T isovalue, int *edgeCases, int *leftTrim, int *rightTrim, dim3 dataShape) {
    dim3 edgeCasesBlock(32, 16, 1);
    dim3 edgeCasesGrid((dataShape.x - 1 + edgeCasesBlock.x - 1) / edgeCasesBlock.x,
                       (dataShape.y + edgeCasesBlock.y - 1) / edgeCasesBlock.y,
                       dataShape.z);

    calculateEdgeCases<<<edgeCasesGrid, edgeCasesBlock>>>(scalars, isovalue, edgeCases, dataShape);

    cudaDeviceSynchronize();

    dim3 trimPosBlock(256, 1, 1);
    dim3 trimPosGrid((dataShape.y + trimPosBlock.x - 1) / trimPosBlock.x, dataShape.z);

    calculateTrimPositions<<<trimPosGrid, trimPosBlock>>>(edgeCases, leftTrim, rightTrim, dataShape);

    cudaDeviceSynchronize();
}

__device__ int getCubeCase(int ec0, int ec1, int ec2, int ec3) {
    unsigned char caseId = 0;
    caseId |= ((ec0 == 0) | (ec0 == 2)) << 0;
    caseId |= ((ec0 == 0) | (ec0 == 1)) << 1;
    caseId |= ((ec1 == 0) | (ec1 == 1)) << 2;
    caseId |= ((ec1 == 0) | (ec1 == 2)) << 3;
    caseId |= ((ec2 == 0) | (ec2 == 2)) << 4;
    caseId |= ((ec2 == 0) | (ec2 == 1)) << 5;
    caseId |= ((ec3 == 0) | (ec3 == 1)) << 6;
    caseId |= ((ec3 == 0) | (ec3 == 2)) << 7;
    return caseId;
}

__global__ void getCubeCases(const int *edgeCases,
                             const int *leftTrim,
                             const int *rightTrim,
                             int *triCount,
                             int *cubeCases,
                             int *left_c,
                             int *right_c,
                             dim3 dataShape) {
    const int j = blockIdx.y * blockDim.y + threadIdx.y;
    const int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (j >= (dataShape.y - 1) || k >= (dataShape.z - 1)) return;

    const int jk = j + k * dataShape.y;
    const int jk_minus = j + k * (dataShape.y - 1);

    // Compute left_c and right_c
    left_c[jk_minus] = min(min(leftTrim[jk], leftTrim[jk + 1]),
                           min(leftTrim[jk + dataShape.y], leftTrim[jk + dataShape.y + 1]));
    right_c[jk_minus] = min(min(rightTrim[jk], rightTrim[jk + 1]),
                            min(rightTrim[jk + dataShape.y], rightTrim[jk + dataShape.y + 1]));

    const int left = left_c[jk_minus];
    const int right = right_c[jk_minus];

    int localTriCount = 0;
    const int stride_y = (dataShape.x - 1) * dataShape.y;
    const int base_idx = j * (dataShape.x - 1) + k * stride_y;

    for (int i = left; i < right; ++i) {
        const int idx = i + base_idx;
        const int ec0 = edgeCases[idx];
        const int ec1 = edgeCases[idx + (dataShape.x - 1)];
        const int ec2 = edgeCases[idx + stride_y];
        const int ec3 = edgeCases[idx + stride_y + (dataShape.x - 1)];

        const unsigned char cubeCase = getCubeCase(ec0, ec1, ec2, ec3);
        cubeCases[i + j * (dataShape.x - 1) + k * (dataShape.x - 1) * (dataShape.y - 1)] = cubeCase;
        localTriCount += numTris[cubeCase];
    }

    triCount[jk_minus] = localTriCount;
}

void Pass2(int *d_edgeCases, int *d_leftTrim, int *d_rightTrim, int *d_triCount,
           int *d_cubeCases, int *d_left_c, int *d_right_c, dim3 dataShape) {
    dim3 blockDim(1, 32, 32);
    dim3 gridDim(1, (dataShape.y - 1 + blockDim.y - 1) / blockDim.y,
                 (dataShape.z - 1 + blockDim.z - 1) / blockDim.z);

    getCubeCases<<<gridDim, blockDim>>>(d_edgeCases, d_leftTrim, d_rightTrim, d_triCount,
                                        d_cubeCases, d_left_c, d_right_c, dataShape);

    cudaDeviceSynchronize();
}


// Improved pass3 with support for shared memory-based prefix sum
__global__ void Pass3(
        const int *triCount,  // Triangle counts computed in Pass2
        int *triOffsets,
        int *totalTriangles,
        int totalVoxels
) {
    extern __shared__ int sharedData[];
    int *localSums = sharedData;

    int idx = blockIdx.x * blockDim.x + threadIdx.x;

    int localCount = 0;
    if (idx < totalVoxels) {
        localCount = triCount[idx];
    }
    localSums[threadIdx.x] = localCount;
    __syncthreads();

    // Perform parallel prefix sum within the block
    for (int stride = 1; stride < blockDim.x; stride *= 2) {
        int index = (threadIdx.x + 1) * 2 * stride - 1;
        if (index < blockDim.x) {
            localSums[index] += localSums[index - stride];
        }
        __syncthreads();
    }

    // Why reset the last element?
    int blockSum = 0;
    if (threadIdx.x == blockDim.x - 1) {
        blockSum = localSums[threadIdx.x];
        localSums[threadIdx.x] = 0;
    }
    __syncthreads();

    for (int stride = blockDim.x / 2; stride > 0; stride /= 2) {
        int index = (threadIdx.x + 1) * 2 * stride - 1;
        if (index < blockDim.x) {
            int temp = localSums[index];
            localSums[index] += localSums[index - stride];
            localSums[index - stride] = temp;
        }
        __syncthreads();
    }

    if (idx < totalVoxels) {
        triOffsets[idx] = localSums[threadIdx.x];
    }

    if (blockIdx.x > 0) {
        triOffsets[idx] += blockSum;
    }

    if (idx == totalVoxels - 1) {
        *totalTriangles = triOffsets[idx] + localCount;
    }
}


template<typename T>
__device__ void interpolateVertex(float *vert, T isovalue,
                                  float x1, float y1, float z1, T val1,
                                  float x2, float y2, float z2, T val2) {
    T mu = (isovalue - val1) / (val2 - val1);
    vert[0] = x1 + mu * (x2 - x1);
    vert[1] = y1 + mu * (y2 - y1);
    vert[2] = z1 + mu * (z2 - z1);
}

template<typename T>
__global__ void Pass4(
        const T *scalars,
        const int *cubeCases,
        const int *triOffsets,
        Vertex *vertices,
        Triangle *triangles,
        T isovalue,
        dim3 dataShape
) {
    int x = blockIdx.x * blockDim.x + threadIdx.x;
    int y = blockIdx.y * blockDim.y + threadIdx.y;
    int z = blockIdx.z * blockDim.z + threadIdx.z;

    if (x >= dataShape.x - 1 || y >= dataShape.y - 1 || z >= dataShape.z - 1) {
        return;
    }

    int voxelIndex = x + y * (dataShape.x - 1) + z * (dataShape.x - 1) * (dataShape.y - 1);
    int cubeCase = cubeCases[voxelIndex];
    int triOffset = triOffsets[voxelIndex];

    if (numTris[cubeCase] == 0) {
        return;
    }

    float cubeVertices[8][3] = {
            {x,     y,     z},       // 0
            {x + 1, y,     z},     // 1
            {x + 1, y + 1, z},   // 2
            {x,     y + 1, z},     // 3
            {x,     y,     z + 1},     // 4
            {x + 1, y,     z + 1},   // 5
            {x + 1, y + 1, z + 1}, // 6
            {x,     y + 1, z + 1}    // 7
    };

    float vertList[12][3];

    for (int i = 0; i < 12; ++i) {
        if (isCut[cubeCase][i]) {
            int v1 = edgeVertices[i][0];
            int v2 = edgeVertices[i][1];
            interpolateVertex(
                    vertList[i], isovalue,
                    cubeVertices[v1][0], cubeVertices[v1][1], cubeVertices[v1][2],
                    scalars[z * dataShape.x * dataShape.y + y * dataShape.x + x +
                            (v1 >> 2) * dataShape.x * dataShape.y + ((v1 & 2) >> 1) * dataShape.x + (v1 & 1)],
                    cubeVertices[v2][0], cubeVertices[v2][1], cubeVertices[v2][2],
                    scalars[z * dataShape.x * dataShape.y + y * dataShape.x + x +
                            (v2 >> 2) * dataShape.x * dataShape.y + ((v2 & 2) >> 1) * dataShape.x + (v2 & 1)]
            );
        }
    }

    for (int i = 0; i < numTris[cubeCase]; ++i) {
        int triIndex = triOffset + i;
        int vertIndex = triIndex * 3;

        for (int j = 0; j < 3; ++j) {
            int edgeIndex = caseTriangles[cubeCase][i * 3 + j];
            vertices[vertIndex + j].x = vertList[edgeIndex][0];
            vertices[vertIndex + j].y = vertList[edgeIndex][1];
            vertices[vertIndex + j].z = vertList[edgeIndex][2];
        }

        triangles[triIndex].v1 = vertIndex;
        triangles[triIndex].v2 = vertIndex + 1;
        triangles[triIndex].v3 = vertIndex + 2;
    }
}


template<typename T>
std::vector <T> readF32File(const std::string &filename, std::size_t numElements) {
    std::ifstream file(filename.c_str(), std::ios::binary);
    if (!file.is_open()) {
        throw std::runtime_error("Unable to open file: " + filename);
    }

    // get file size
    file.seekg(0, std::ios::end);
    std::size_t fileSize = file.tellg();
    file.seekg(0, std::ios::beg);

    // calculate the number of elements to read
    std::size_t dataSize = std::min(fileSize / sizeof(T), numElements);
    std::vector <T> data(dataSize);

    // read data
    file.read(reinterpret_cast<char *>(data.data()), dataSize * sizeof(T));

    if (!file) {
        throw std::runtime_error("Error reading file: " + filename);
    }

    return data;
}

int main() {
    float isovalue = 10.5f;
    std::string filePath = "temperature.f32";
    size_t numElements = 512 * 512 * 512;
    dim3 dataShape(512, 512, 512);

    std::vector<float> host_scalars = readF32File<float>(filePath, numElements);

    dim3 gridSize((dataShape.x - 1 + BLOCK_SIZE_X - 1) / BLOCK_SIZE_X, dataShape.y - 1, dataShape.z - 1);
    dim3 blockSize(BLOCK_SIZE_X, 1, 1);

    float *d_scalars;
    int *d_edgeCases, *d_cubeCases, *d_leftTrim, *d_rightTrim, *d_triCount, *d_triOffsets;
    int *d_leftTrim_c, *d_rightTrim_c;
    int *d_totalTriangles;
    Vertex *d_vertices;
    Triangle *d_triangles;

    cudaMalloc(&d_scalars, numElements * sizeof(float));
    cudaMalloc(&d_edgeCases, (dataShape.x - 1) * dataShape.y * dataShape.z * sizeof(int));
    cudaMalloc(&d_cubeCases, (dataShape.x - 1) * (dataShape.y - 1) * (dataShape.z - 1) * sizeof(int));
    cudaMalloc(&d_leftTrim, (dataShape.y - 1) * dataShape.z * sizeof(int));
    cudaMalloc(&d_rightTrim, (dataShape.y - 1) * dataShape.z * sizeof(int));
    cudaMalloc(&d_leftTrim_c, (dataShape.y - 1) * (dataShape.z - 1) * sizeof(int));
    cudaMalloc(&d_rightTrim_c, (dataShape.y - 1) * (dataShape.z - 1) * sizeof(int));
    cudaMalloc(&d_triCount, (dataShape.y - 1) * (dataShape.z - 1) * sizeof(int));
    cudaMalloc(&d_triOffsets, (dataShape.x - 1) * (dataShape.y - 1) * (dataShape.z - 1) * sizeof(int));
    cudaMalloc(&d_totalTriangles, sizeof(int));
    cudaCheckError();

    cudaMemcpy(d_scalars, host_scalars.data(), numElements * sizeof(float), cudaMemcpyHostToDevice);

    Pass1<float, BLOCK_SIZE_X>(d_scalars, isovalue, d_edgeCases, d_leftTrim, d_rightTrim,
                               dataShape);
    cudaCheckError();

    Pass2(d_edgeCases, d_leftTrim, d_rightTrim, d_triCount, d_cubeCases, d_leftTrim_c, d_rightTrim_c, dataShape);

    cudaCheckError();

    int totalVoxels = (dataShape.x - 1) * (dataShape.y - 1) * (dataShape.z - 1);
    int numBlocks = (totalVoxels + BLOCK_SIZE_X - 1) / BLOCK_SIZE_X;
    Pass3<<<numBlocks, BLOCK_SIZE_X, BLOCK_SIZE_X * sizeof(int)>>>(d_triCount, d_triOffsets, d_totalTriangles,
                                                                   totalVoxels);

    cudaCheckError();

    int totalTriangles;
    cudaMemcpy(&totalTriangles, d_totalTriangles, sizeof(int), cudaMemcpyDeviceToHost);

    cudaMalloc(&d_vertices, totalTriangles * 3 * sizeof(Vertex));
    cudaMalloc(&d_triangles, totalTriangles * sizeof(Triangle));

    Pass4<float><<<gridSize, blockSize>>>(d_scalars, d_cubeCases, d_triOffsets, d_vertices, d_triangles, isovalue,
                                          dataShape);
    cudaCheckError();
//     By checking error position, we can tell that it is really the pass4 that has error.
// TODO: By debuging, we find that maybe triOffsets array has invalid number, which we will mainly solve for the next week



    std::vector <Vertex> hostVertices(totalTriangles * 3);
    std::vector <Triangle> hostTriangles(totalTriangles);
    cudaMemcpy(hostVertices.data(), d_vertices, totalTriangles * 3 * sizeof(Vertex), cudaMemcpyDeviceToHost);
    cudaMemcpy(hostTriangles.data(), d_triangles, totalTriangles * sizeof(Triangle), cudaMemcpyDeviceToHost);

    cudaFree(d_scalars);
    cudaFree(d_edgeCases);
    cudaFree(d_cubeCases);
    cudaFree(d_leftTrim);
    cudaFree(d_rightTrim);
    cudaFree(d_triCount);
    cudaFree(d_triOffsets);
    cudaFree(d_totalTriangles);
    cudaFree(d_vertices);
    cudaFree(d_triangles);
    cudaCheckError();

    cudaError_t error = cudaGetLastError();
    if (error != cudaSuccess) {
        std::cerr << "CUDA error: " << cudaGetErrorString(error) << std::endl;
        return -1;
    }

    std::cout << "Total triangles generated: " << totalTriangles << std::endl;

    return 0;
}